/* Validating XML processor for src/surf/xml/simgrid.dtd.
 *
 * This program was generated with the FleXML XML processor generator.
 * FleXML is Copyright (C) 1999-2005 Kristoffer Rose.  All rights reserved.
 * FleXML is Copyright (C) 2003-2013 Martin Quinson.  All rights reserved.
 * (1.9.6).
 * 
 * There are two, intertwined parts to this program, part A and part B.
 *
 * Part A
 * ------
 * 
 * Some parts, here collectively called "Part A", are found in the 
 * FleXML package.  They are Copyright (C) 1999-2005 Kristoffer Rose
 * and Copyright (C) 2003-2013 Martin Quinson. All rights reserved.
 *
 * You can redistribute, use, perform, display and/or modify "Part A"
 * provided the following two conditions hold:
 *
 * 1. The program is distributed WITHOUT ANY WARRANTY from the author of
 *    FleXML; without even the implied warranty of MERCHANTABILITY or
 *    FITNESS FOR A PARTICULAR PURPOSE.
 *
 * 2. The program distribution conditions do not in any way affect the
 *    distribution conditions of the FleXML system used to generate this
 *    file or any version of FleXML derived from that system.
 *
 * Notice that these are explicit rights granted to you for files
 * generated by the FleXML system.  For your rights in connection with
 * the FleXML system itself please consult the GNU General Public License.
 * 
 * Part B
 * ------
 * 
 * The other parts, here collectively called "Part B", and which came 
 * from the DTD used by FleXML to generate this program, can be 
 * distributed (or not, as the case may be) under the terms of whoever
 * wrote them, provided these terms respect and obey the two conditions 
 * above under the heading "Part A".
 *
 * The author of and contributors to FleXML specifically disclaim
 * any copyright interest in "Part B", unless "Part B" was written 
 * by the author of or contributors to FleXML.
 * 
 */

%{

/* Version strings. */
const char surfxml_flexml_version[] = "1.9.6";

/* ANSI headers. */
#include <stdlib.h> /* for realloc() -- needed here when using flex 2.5.4 */
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <stdarg.h>
#include <ctype.h>
     
#if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__TOS_WIN__)
# ifndef __STRICT_ANSI__
#  include <io.h>
#  include <process.h>
# endif
#else
# include <unistd.h>
#endif
     
#ifndef FLEXML_INDEXSTACKSIZE
#define FLEXML_INDEXSTACKSIZE 1000
#endif

/* Generated definitions. */
#define FLEXML_yylineno
#ifndef FLEXML_BUFFERSTACKSIZE
#define FLEXML_BUFFERSTACKSIZE 1000000
#endif
#define FLEXML_NEED_BUFFERLIT

/* XML processor api. */
/* FleXML-provided data. */
int surfxml_pcdata_ix;
extern char *surfxml_bufferstack;
#define surfxml_pcdata (surfxml_bufferstack + surfxml_pcdata_ix)
AT_surfxml_AS_id AX_surfxml_AS_id;
#define A_surfxml_AS_id (surfxml_bufferstack + AX_surfxml_AS_id)
short int surfxml_AS_id_isset;
AT_surfxml_AS_routing AX_surfxml_AS_routing;
#define A_surfxml_AS_routing AX_surfxml_AS_routing
short int surfxml_AS_routing_isset;
AT_surfxml_ASroute_dst AX_surfxml_ASroute_dst;
#define A_surfxml_ASroute_dst (surfxml_bufferstack + AX_surfxml_ASroute_dst)
short int surfxml_ASroute_dst_isset;
AT_surfxml_ASroute_gw___dst AX_surfxml_ASroute_gw___dst;
#define A_surfxml_ASroute_gw___dst (surfxml_bufferstack + AX_surfxml_ASroute_gw___dst)
short int surfxml_ASroute_gw___dst_isset;
AT_surfxml_ASroute_gw___src AX_surfxml_ASroute_gw___src;
#define A_surfxml_ASroute_gw___src (surfxml_bufferstack + AX_surfxml_ASroute_gw___src)
short int surfxml_ASroute_gw___src_isset;
AT_surfxml_ASroute_src AX_surfxml_ASroute_src;
#define A_surfxml_ASroute_src (surfxml_bufferstack + AX_surfxml_ASroute_src)
short int surfxml_ASroute_src_isset;
AT_surfxml_ASroute_symmetrical AX_surfxml_ASroute_symmetrical;
#define A_surfxml_ASroute_symmetrical AX_surfxml_ASroute_symmetrical
short int surfxml_ASroute_symmetrical_isset;
AT_surfxml_actor_function AX_surfxml_actor_function;
#define A_surfxml_actor_function (surfxml_bufferstack + AX_surfxml_actor_function)
short int surfxml_actor_function_isset;
AT_surfxml_actor_host AX_surfxml_actor_host;
#define A_surfxml_actor_host (surfxml_bufferstack + AX_surfxml_actor_host)
short int surfxml_actor_host_isset;
AT_surfxml_actor_kill___time AX_surfxml_actor_kill___time;
#define A_surfxml_actor_kill___time (surfxml_bufferstack + AX_surfxml_actor_kill___time)
short int surfxml_actor_kill___time_isset;
AT_surfxml_actor_on___failure AX_surfxml_actor_on___failure;
#define A_surfxml_actor_on___failure AX_surfxml_actor_on___failure
short int surfxml_actor_on___failure_isset;
AT_surfxml_actor_start___time AX_surfxml_actor_start___time;
#define A_surfxml_actor_start___time (surfxml_bufferstack + AX_surfxml_actor_start___time)
short int surfxml_actor_start___time_isset;
AT_surfxml_argument_value AX_surfxml_argument_value;
#define A_surfxml_argument_value (surfxml_bufferstack + AX_surfxml_argument_value)
short int surfxml_argument_value_isset;
AT_surfxml_backbone_bandwidth AX_surfxml_backbone_bandwidth;
#define A_surfxml_backbone_bandwidth (surfxml_bufferstack + AX_surfxml_backbone_bandwidth)
short int surfxml_backbone_bandwidth_isset;
AT_surfxml_backbone_id AX_surfxml_backbone_id;
#define A_surfxml_backbone_id (surfxml_bufferstack + AX_surfxml_backbone_id)
short int surfxml_backbone_id_isset;
AT_surfxml_backbone_latency AX_surfxml_backbone_latency;
#define A_surfxml_backbone_latency (surfxml_bufferstack + AX_surfxml_backbone_latency)
short int surfxml_backbone_latency_isset;
AT_surfxml_bypassASroute_dst AX_surfxml_bypassASroute_dst;
#define A_surfxml_bypassASroute_dst (surfxml_bufferstack + AX_surfxml_bypassASroute_dst)
short int surfxml_bypassASroute_dst_isset;
AT_surfxml_bypassASroute_gw___dst AX_surfxml_bypassASroute_gw___dst;
#define A_surfxml_bypassASroute_gw___dst (surfxml_bufferstack + AX_surfxml_bypassASroute_gw___dst)
short int surfxml_bypassASroute_gw___dst_isset;
AT_surfxml_bypassASroute_gw___src AX_surfxml_bypassASroute_gw___src;
#define A_surfxml_bypassASroute_gw___src (surfxml_bufferstack + AX_surfxml_bypassASroute_gw___src)
short int surfxml_bypassASroute_gw___src_isset;
AT_surfxml_bypassASroute_src AX_surfxml_bypassASroute_src;
#define A_surfxml_bypassASroute_src (surfxml_bufferstack + AX_surfxml_bypassASroute_src)
short int surfxml_bypassASroute_src_isset;
AT_surfxml_bypassRoute_dst AX_surfxml_bypassRoute_dst;
#define A_surfxml_bypassRoute_dst (surfxml_bufferstack + AX_surfxml_bypassRoute_dst)
short int surfxml_bypassRoute_dst_isset;
AT_surfxml_bypassRoute_src AX_surfxml_bypassRoute_src;
#define A_surfxml_bypassRoute_src (surfxml_bufferstack + AX_surfxml_bypassRoute_src)
short int surfxml_bypassRoute_src_isset;
AT_surfxml_bypassZoneRoute_dst AX_surfxml_bypassZoneRoute_dst;
#define A_surfxml_bypassZoneRoute_dst (surfxml_bufferstack + AX_surfxml_bypassZoneRoute_dst)
short int surfxml_bypassZoneRoute_dst_isset;
AT_surfxml_bypassZoneRoute_gw___dst AX_surfxml_bypassZoneRoute_gw___dst;
#define A_surfxml_bypassZoneRoute_gw___dst (surfxml_bufferstack + AX_surfxml_bypassZoneRoute_gw___dst)
short int surfxml_bypassZoneRoute_gw___dst_isset;
AT_surfxml_bypassZoneRoute_gw___src AX_surfxml_bypassZoneRoute_gw___src;
#define A_surfxml_bypassZoneRoute_gw___src (surfxml_bufferstack + AX_surfxml_bypassZoneRoute_gw___src)
short int surfxml_bypassZoneRoute_gw___src_isset;
AT_surfxml_bypassZoneRoute_src AX_surfxml_bypassZoneRoute_src;
#define A_surfxml_bypassZoneRoute_src (surfxml_bufferstack + AX_surfxml_bypassZoneRoute_src)
short int surfxml_bypassZoneRoute_src_isset;
AT_surfxml_cabinet_bw AX_surfxml_cabinet_bw;
#define A_surfxml_cabinet_bw (surfxml_bufferstack + AX_surfxml_cabinet_bw)
short int surfxml_cabinet_bw_isset;
AT_surfxml_cabinet_id AX_surfxml_cabinet_id;
#define A_surfxml_cabinet_id (surfxml_bufferstack + AX_surfxml_cabinet_id)
short int surfxml_cabinet_id_isset;
AT_surfxml_cabinet_lat AX_surfxml_cabinet_lat;
#define A_surfxml_cabinet_lat (surfxml_bufferstack + AX_surfxml_cabinet_lat)
short int surfxml_cabinet_lat_isset;
AT_surfxml_cabinet_prefix AX_surfxml_cabinet_prefix;
#define A_surfxml_cabinet_prefix (surfxml_bufferstack + AX_surfxml_cabinet_prefix)
short int surfxml_cabinet_prefix_isset;
AT_surfxml_cabinet_radical AX_surfxml_cabinet_radical;
#define A_surfxml_cabinet_radical (surfxml_bufferstack + AX_surfxml_cabinet_radical)
short int surfxml_cabinet_radical_isset;
AT_surfxml_cabinet_speed AX_surfxml_cabinet_speed;
#define A_surfxml_cabinet_speed (surfxml_bufferstack + AX_surfxml_cabinet_speed)
short int surfxml_cabinet_speed_isset;
AT_surfxml_cabinet_suffix AX_surfxml_cabinet_suffix;
#define A_surfxml_cabinet_suffix (surfxml_bufferstack + AX_surfxml_cabinet_suffix)
short int surfxml_cabinet_suffix_isset;
AT_surfxml_cluster_bb___bw AX_surfxml_cluster_bb___bw;
#define A_surfxml_cluster_bb___bw (surfxml_bufferstack + AX_surfxml_cluster_bb___bw)
short int surfxml_cluster_bb___bw_isset;
AT_surfxml_cluster_bb___lat AX_surfxml_cluster_bb___lat;
#define A_surfxml_cluster_bb___lat (surfxml_bufferstack + AX_surfxml_cluster_bb___lat)
short int surfxml_cluster_bb___lat_isset;
AT_surfxml_cluster_bb___sharing___policy AX_surfxml_cluster_bb___sharing___policy;
#define A_surfxml_cluster_bb___sharing___policy AX_surfxml_cluster_bb___sharing___policy
short int surfxml_cluster_bb___sharing___policy_isset;
AT_surfxml_cluster_bw AX_surfxml_cluster_bw;
#define A_surfxml_cluster_bw (surfxml_bufferstack + AX_surfxml_cluster_bw)
short int surfxml_cluster_bw_isset;
AT_surfxml_cluster_core AX_surfxml_cluster_core;
#define A_surfxml_cluster_core (surfxml_bufferstack + AX_surfxml_cluster_core)
short int surfxml_cluster_core_isset;
AT_surfxml_cluster_id AX_surfxml_cluster_id;
#define A_surfxml_cluster_id (surfxml_bufferstack + AX_surfxml_cluster_id)
short int surfxml_cluster_id_isset;
AT_surfxml_cluster_lat AX_surfxml_cluster_lat;
#define A_surfxml_cluster_lat (surfxml_bufferstack + AX_surfxml_cluster_lat)
short int surfxml_cluster_lat_isset;
AT_surfxml_cluster_limiter___link AX_surfxml_cluster_limiter___link;
#define A_surfxml_cluster_limiter___link (surfxml_bufferstack + AX_surfxml_cluster_limiter___link)
short int surfxml_cluster_limiter___link_isset;
AT_surfxml_cluster_loopback___bw AX_surfxml_cluster_loopback___bw;
#define A_surfxml_cluster_loopback___bw (surfxml_bufferstack + AX_surfxml_cluster_loopback___bw)
short int surfxml_cluster_loopback___bw_isset;
AT_surfxml_cluster_loopback___lat AX_surfxml_cluster_loopback___lat;
#define A_surfxml_cluster_loopback___lat (surfxml_bufferstack + AX_surfxml_cluster_loopback___lat)
short int surfxml_cluster_loopback___lat_isset;
AT_surfxml_cluster_prefix AX_surfxml_cluster_prefix;
#define A_surfxml_cluster_prefix (surfxml_bufferstack + AX_surfxml_cluster_prefix)
short int surfxml_cluster_prefix_isset;
AT_surfxml_cluster_radical AX_surfxml_cluster_radical;
#define A_surfxml_cluster_radical (surfxml_bufferstack + AX_surfxml_cluster_radical)
short int surfxml_cluster_radical_isset;
AT_surfxml_cluster_router___id AX_surfxml_cluster_router___id;
#define A_surfxml_cluster_router___id (surfxml_bufferstack + AX_surfxml_cluster_router___id)
short int surfxml_cluster_router___id_isset;
AT_surfxml_cluster_sharing___policy AX_surfxml_cluster_sharing___policy;
#define A_surfxml_cluster_sharing___policy AX_surfxml_cluster_sharing___policy
short int surfxml_cluster_sharing___policy_isset;
AT_surfxml_cluster_speed AX_surfxml_cluster_speed;
#define A_surfxml_cluster_speed (surfxml_bufferstack + AX_surfxml_cluster_speed)
short int surfxml_cluster_speed_isset;
AT_surfxml_cluster_suffix AX_surfxml_cluster_suffix;
#define A_surfxml_cluster_suffix (surfxml_bufferstack + AX_surfxml_cluster_suffix)
short int surfxml_cluster_suffix_isset;
AT_surfxml_cluster_topo___parameters AX_surfxml_cluster_topo___parameters;
#define A_surfxml_cluster_topo___parameters (surfxml_bufferstack + AX_surfxml_cluster_topo___parameters)
short int surfxml_cluster_topo___parameters_isset;
AT_surfxml_cluster_topology AX_surfxml_cluster_topology;
#define A_surfxml_cluster_topology AX_surfxml_cluster_topology
short int surfxml_cluster_topology_isset;
AT_surfxml_config_id AX_surfxml_config_id;
#define A_surfxml_config_id (surfxml_bufferstack + AX_surfxml_config_id)
short int surfxml_config_id_isset;
AT_surfxml_host_availability___file AX_surfxml_host_availability___file;
#define A_surfxml_host_availability___file (surfxml_bufferstack + AX_surfxml_host_availability___file)
short int surfxml_host_availability___file_isset;
AT_surfxml_host_coordinates AX_surfxml_host_coordinates;
#define A_surfxml_host_coordinates (surfxml_bufferstack + AX_surfxml_host_coordinates)
short int surfxml_host_coordinates_isset;
AT_surfxml_host_core AX_surfxml_host_core;
#define A_surfxml_host_core (surfxml_bufferstack + AX_surfxml_host_core)
short int surfxml_host_core_isset;
AT_surfxml_host_id AX_surfxml_host_id;
#define A_surfxml_host_id (surfxml_bufferstack + AX_surfxml_host_id)
short int surfxml_host_id_isset;
AT_surfxml_host_pstate AX_surfxml_host_pstate;
#define A_surfxml_host_pstate (surfxml_bufferstack + AX_surfxml_host_pstate)
short int surfxml_host_pstate_isset;
AT_surfxml_host_speed AX_surfxml_host_speed;
#define A_surfxml_host_speed (surfxml_bufferstack + AX_surfxml_host_speed)
short int surfxml_host_speed_isset;
AT_surfxml_host_state___file AX_surfxml_host_state___file;
#define A_surfxml_host_state___file (surfxml_bufferstack + AX_surfxml_host_state___file)
short int surfxml_host_state___file_isset;
AT_surfxml_host___link_down AX_surfxml_host___link_down;
#define A_surfxml_host___link_down (surfxml_bufferstack + AX_surfxml_host___link_down)
short int surfxml_host___link_down_isset;
AT_surfxml_host___link_id AX_surfxml_host___link_id;
#define A_surfxml_host___link_id (surfxml_bufferstack + AX_surfxml_host___link_id)
short int surfxml_host___link_id_isset;
AT_surfxml_host___link_up AX_surfxml_host___link_up;
#define A_surfxml_host___link_up (surfxml_bufferstack + AX_surfxml_host___link_up)
short int surfxml_host___link_up_isset;
AT_surfxml_include_file AX_surfxml_include_file;
#define A_surfxml_include_file (surfxml_bufferstack + AX_surfxml_include_file)
short int surfxml_include_file_isset;
AT_surfxml_link_bandwidth AX_surfxml_link_bandwidth;
#define A_surfxml_link_bandwidth (surfxml_bufferstack + AX_surfxml_link_bandwidth)
short int surfxml_link_bandwidth_isset;
AT_surfxml_link_bandwidth___file AX_surfxml_link_bandwidth___file;
#define A_surfxml_link_bandwidth___file (surfxml_bufferstack + AX_surfxml_link_bandwidth___file)
short int surfxml_link_bandwidth___file_isset;
AT_surfxml_link_id AX_surfxml_link_id;
#define A_surfxml_link_id (surfxml_bufferstack + AX_surfxml_link_id)
short int surfxml_link_id_isset;
AT_surfxml_link_latency AX_surfxml_link_latency;
#define A_surfxml_link_latency (surfxml_bufferstack + AX_surfxml_link_latency)
short int surfxml_link_latency_isset;
AT_surfxml_link_latency___file AX_surfxml_link_latency___file;
#define A_surfxml_link_latency___file (surfxml_bufferstack + AX_surfxml_link_latency___file)
short int surfxml_link_latency___file_isset;
AT_surfxml_link_sharing___policy AX_surfxml_link_sharing___policy;
#define A_surfxml_link_sharing___policy AX_surfxml_link_sharing___policy
short int surfxml_link_sharing___policy_isset;
AT_surfxml_link_state___file AX_surfxml_link_state___file;
#define A_surfxml_link_state___file (surfxml_bufferstack + AX_surfxml_link_state___file)
short int surfxml_link_state___file_isset;
AT_surfxml_link___ctn_direction AX_surfxml_link___ctn_direction;
#define A_surfxml_link___ctn_direction AX_surfxml_link___ctn_direction
short int surfxml_link___ctn_direction_isset;
AT_surfxml_link___ctn_id AX_surfxml_link___ctn_id;
#define A_surfxml_link___ctn_id (surfxml_bufferstack + AX_surfxml_link___ctn_id)
short int surfxml_link___ctn_id_isset;
AT_surfxml_model___prop_id AX_surfxml_model___prop_id;
#define A_surfxml_model___prop_id (surfxml_bufferstack + AX_surfxml_model___prop_id)
short int surfxml_model___prop_id_isset;
AT_surfxml_model___prop_value AX_surfxml_model___prop_value;
#define A_surfxml_model___prop_value (surfxml_bufferstack + AX_surfxml_model___prop_value)
short int surfxml_model___prop_value_isset;
AT_surfxml_mount_name AX_surfxml_mount_name;
#define A_surfxml_mount_name (surfxml_bufferstack + AX_surfxml_mount_name)
short int surfxml_mount_name_isset;
AT_surfxml_mount_storageId AX_surfxml_mount_storageId;
#define A_surfxml_mount_storageId (surfxml_bufferstack + AX_surfxml_mount_storageId)
short int surfxml_mount_storageId_isset;
AT_surfxml_peer_availability___file AX_surfxml_peer_availability___file;
#define A_surfxml_peer_availability___file (surfxml_bufferstack + AX_surfxml_peer_availability___file)
short int surfxml_peer_availability___file_isset;
AT_surfxml_peer_bw___in AX_surfxml_peer_bw___in;
#define A_surfxml_peer_bw___in (surfxml_bufferstack + AX_surfxml_peer_bw___in)
short int surfxml_peer_bw___in_isset;
AT_surfxml_peer_bw___out AX_surfxml_peer_bw___out;
#define A_surfxml_peer_bw___out (surfxml_bufferstack + AX_surfxml_peer_bw___out)
short int surfxml_peer_bw___out_isset;
AT_surfxml_peer_coordinates AX_surfxml_peer_coordinates;
#define A_surfxml_peer_coordinates (surfxml_bufferstack + AX_surfxml_peer_coordinates)
short int surfxml_peer_coordinates_isset;
AT_surfxml_peer_id AX_surfxml_peer_id;
#define A_surfxml_peer_id (surfxml_bufferstack + AX_surfxml_peer_id)
short int surfxml_peer_id_isset;
AT_surfxml_peer_lat AX_surfxml_peer_lat;
#define A_surfxml_peer_lat (surfxml_bufferstack + AX_surfxml_peer_lat)
short int surfxml_peer_lat_isset;
AT_surfxml_peer_speed AX_surfxml_peer_speed;
#define A_surfxml_peer_speed (surfxml_bufferstack + AX_surfxml_peer_speed)
short int surfxml_peer_speed_isset;
AT_surfxml_peer_state___file AX_surfxml_peer_state___file;
#define A_surfxml_peer_state___file (surfxml_bufferstack + AX_surfxml_peer_state___file)
short int surfxml_peer_state___file_isset;
AT_surfxml_platform_version AX_surfxml_platform_version;
#define A_surfxml_platform_version (surfxml_bufferstack + AX_surfxml_platform_version)
short int surfxml_platform_version_isset;
AT_surfxml_process_function AX_surfxml_process_function;
#define A_surfxml_process_function (surfxml_bufferstack + AX_surfxml_process_function)
short int surfxml_process_function_isset;
AT_surfxml_process_host AX_surfxml_process_host;
#define A_surfxml_process_host (surfxml_bufferstack + AX_surfxml_process_host)
short int surfxml_process_host_isset;
AT_surfxml_process_kill___time AX_surfxml_process_kill___time;
#define A_surfxml_process_kill___time (surfxml_bufferstack + AX_surfxml_process_kill___time)
short int surfxml_process_kill___time_isset;
AT_surfxml_process_on___failure AX_surfxml_process_on___failure;
#define A_surfxml_process_on___failure AX_surfxml_process_on___failure
short int surfxml_process_on___failure_isset;
AT_surfxml_process_start___time AX_surfxml_process_start___time;
#define A_surfxml_process_start___time (surfxml_bufferstack + AX_surfxml_process_start___time)
short int surfxml_process_start___time_isset;
AT_surfxml_prop_id AX_surfxml_prop_id;
#define A_surfxml_prop_id (surfxml_bufferstack + AX_surfxml_prop_id)
short int surfxml_prop_id_isset;
AT_surfxml_prop_value AX_surfxml_prop_value;
#define A_surfxml_prop_value (surfxml_bufferstack + AX_surfxml_prop_value)
short int surfxml_prop_value_isset;
AT_surfxml_random_generator AX_surfxml_random_generator;
#define A_surfxml_random_generator AX_surfxml_random_generator
short int surfxml_random_generator_isset;
AT_surfxml_random_id AX_surfxml_random_id;
#define A_surfxml_random_id (surfxml_bufferstack + AX_surfxml_random_id)
short int surfxml_random_id_isset;
AT_surfxml_random_max AX_surfxml_random_max;
#define A_surfxml_random_max (surfxml_bufferstack + AX_surfxml_random_max)
short int surfxml_random_max_isset;
AT_surfxml_random_mean AX_surfxml_random_mean;
#define A_surfxml_random_mean (surfxml_bufferstack + AX_surfxml_random_mean)
short int surfxml_random_mean_isset;
AT_surfxml_random_min AX_surfxml_random_min;
#define A_surfxml_random_min (surfxml_bufferstack + AX_surfxml_random_min)
short int surfxml_random_min_isset;
AT_surfxml_random_radical AX_surfxml_random_radical;
#define A_surfxml_random_radical (surfxml_bufferstack + AX_surfxml_random_radical)
short int surfxml_random_radical_isset;
AT_surfxml_random_seed AX_surfxml_random_seed;
#define A_surfxml_random_seed (surfxml_bufferstack + AX_surfxml_random_seed)
short int surfxml_random_seed_isset;
AT_surfxml_random_std___deviation AX_surfxml_random_std___deviation;
#define A_surfxml_random_std___deviation (surfxml_bufferstack + AX_surfxml_random_std___deviation)
short int surfxml_random_std___deviation_isset;
AT_surfxml_route_dst AX_surfxml_route_dst;
#define A_surfxml_route_dst (surfxml_bufferstack + AX_surfxml_route_dst)
short int surfxml_route_dst_isset;
AT_surfxml_route_src AX_surfxml_route_src;
#define A_surfxml_route_src (surfxml_bufferstack + AX_surfxml_route_src)
short int surfxml_route_src_isset;
AT_surfxml_route_symmetrical AX_surfxml_route_symmetrical;
#define A_surfxml_route_symmetrical AX_surfxml_route_symmetrical
short int surfxml_route_symmetrical_isset;
AT_surfxml_router_coordinates AX_surfxml_router_coordinates;
#define A_surfxml_router_coordinates (surfxml_bufferstack + AX_surfxml_router_coordinates)
short int surfxml_router_coordinates_isset;
AT_surfxml_router_id AX_surfxml_router_id;
#define A_surfxml_router_id (surfxml_bufferstack + AX_surfxml_router_id)
short int surfxml_router_id_isset;
AT_surfxml_storage_attach AX_surfxml_storage_attach;
#define A_surfxml_storage_attach (surfxml_bufferstack + AX_surfxml_storage_attach)
short int surfxml_storage_attach_isset;
AT_surfxml_storage_content AX_surfxml_storage_content;
#define A_surfxml_storage_content (surfxml_bufferstack + AX_surfxml_storage_content)
short int surfxml_storage_content_isset;
AT_surfxml_storage_id AX_surfxml_storage_id;
#define A_surfxml_storage_id (surfxml_bufferstack + AX_surfxml_storage_id)
short int surfxml_storage_id_isset;
AT_surfxml_storage_typeId AX_surfxml_storage_typeId;
#define A_surfxml_storage_typeId (surfxml_bufferstack + AX_surfxml_storage_typeId)
short int surfxml_storage_typeId_isset;
AT_surfxml_storage___type_content AX_surfxml_storage___type_content;
#define A_surfxml_storage___type_content (surfxml_bufferstack + AX_surfxml_storage___type_content)
short int surfxml_storage___type_content_isset;
AT_surfxml_storage___type_id AX_surfxml_storage___type_id;
#define A_surfxml_storage___type_id (surfxml_bufferstack + AX_surfxml_storage___type_id)
short int surfxml_storage___type_id_isset;
AT_surfxml_storage___type_model AX_surfxml_storage___type_model;
#define A_surfxml_storage___type_model (surfxml_bufferstack + AX_surfxml_storage___type_model)
short int surfxml_storage___type_model_isset;
AT_surfxml_storage___type_size AX_surfxml_storage___type_size;
#define A_surfxml_storage___type_size (surfxml_bufferstack + AX_surfxml_storage___type_size)
short int surfxml_storage___type_size_isset;
AT_surfxml_trace_file AX_surfxml_trace_file;
#define A_surfxml_trace_file (surfxml_bufferstack + AX_surfxml_trace_file)
short int surfxml_trace_file_isset;
AT_surfxml_trace_id AX_surfxml_trace_id;
#define A_surfxml_trace_id (surfxml_bufferstack + AX_surfxml_trace_id)
short int surfxml_trace_id_isset;
AT_surfxml_trace_periodicity AX_surfxml_trace_periodicity;
#define A_surfxml_trace_periodicity (surfxml_bufferstack + AX_surfxml_trace_periodicity)
short int surfxml_trace_periodicity_isset;
AT_surfxml_trace___connect_element AX_surfxml_trace___connect_element;
#define A_surfxml_trace___connect_element (surfxml_bufferstack + AX_surfxml_trace___connect_element)
short int surfxml_trace___connect_element_isset;
AT_surfxml_trace___connect_kind AX_surfxml_trace___connect_kind;
#define A_surfxml_trace___connect_kind AX_surfxml_trace___connect_kind
short int surfxml_trace___connect_kind_isset;
AT_surfxml_trace___connect_trace AX_surfxml_trace___connect_trace;
#define A_surfxml_trace___connect_trace (surfxml_bufferstack + AX_surfxml_trace___connect_trace)
short int surfxml_trace___connect_trace_isset;
AT_surfxml_zone_id AX_surfxml_zone_id;
#define A_surfxml_zone_id (surfxml_bufferstack + AX_surfxml_zone_id)
short int surfxml_zone_id_isset;
AT_surfxml_zone_routing AX_surfxml_zone_routing;
#define A_surfxml_zone_routing AX_surfxml_zone_routing
short int surfxml_zone_routing_isset;
AT_surfxml_zoneRoute_dst AX_surfxml_zoneRoute_dst;
#define A_surfxml_zoneRoute_dst (surfxml_bufferstack + AX_surfxml_zoneRoute_dst)
short int surfxml_zoneRoute_dst_isset;
AT_surfxml_zoneRoute_gw___dst AX_surfxml_zoneRoute_gw___dst;
#define A_surfxml_zoneRoute_gw___dst (surfxml_bufferstack + AX_surfxml_zoneRoute_gw___dst)
short int surfxml_zoneRoute_gw___dst_isset;
AT_surfxml_zoneRoute_gw___src AX_surfxml_zoneRoute_gw___src;
#define A_surfxml_zoneRoute_gw___src (surfxml_bufferstack + AX_surfxml_zoneRoute_gw___src)
short int surfxml_zoneRoute_gw___src_isset;
AT_surfxml_zoneRoute_src AX_surfxml_zoneRoute_src;
#define A_surfxml_zoneRoute_src (surfxml_bufferstack + AX_surfxml_zoneRoute_src)
short int surfxml_zoneRoute_src_isset;
AT_surfxml_zoneRoute_symmetrical AX_surfxml_zoneRoute_symmetrical;
#define A_surfxml_zoneRoute_symmetrical AX_surfxml_zoneRoute_symmetrical
short int surfxml_zoneRoute_symmetrical_isset;

/* XML state. */
#ifdef FLEX_DEBUG
# define ENTER(state)	debug_enter(state,#state)
# define LEAVE		debug_leave()
# define SET(state)	debug_set(state,#state)
  static void debug_enter(int, const char*);
  static void debug_leave(void);
  static void debug_set(int, const char*);
#else
# define ENTER(state)	(yy_push_state(state))
# define LEAVE		(yy_pop_state())
# define SET(state)	BEGIN(state)
#endif

/* Generic actions. */
#define SKIP	/*skip*/
#define SUCCEED        CLEANUP; return 0

#define FAIL	return fail
static int fail(const char*, ...);

enum {flexml_max_err_msg_size = 512};
static char flexml_err_msg[flexml_max_err_msg_size];
const char * surfxml_parse_err_msg()
{
    return flexml_err_msg;
}
static void reset_surfxml_parse_err_msg()
{
    flexml_err_msg[0] = '\0';
}

/* Cleanup */
static void cleanup(void);
#define CLEANUP  cleanup()

/* Text buffer stack handling. */
char *surfxml_bufferstack = NULL;
static int blimit = FLEXML_BUFFERSTACKSIZE;
static int bnext = 1;

static int *indexstack = NULL;
static int ilimit = FLEXML_INDEXSTACKSIZE;
static int inext = 1;

#define BUFFERSET(P)  (P = bnext)
#define BUFFERPUTC(C) (ck_blimit(), surfxml_bufferstack[bnext++] = (C))
#define BUFFERDONE    (BUFFERPUTC('\0'))

#define BUFFERLITERAL(C, P) surfxml_bufferliteral(C, &(P), yytext)

/* after this is called, there are at least 2 slots left in the stack */
static int ck_blimit()
{
     if (bnext >= blimit) {
	 blimit += FLEXML_BUFFERSTACKSIZE + 2;
	 {
	     char *temp = (char *) realloc(surfxml_bufferstack, blimit);
	     assert(temp);
	     surfxml_bufferstack = temp;
	 }
     }
     return 0;
}

/* after this is called, there are at least 2 slots left in the stack */
static int ck_ilimit()
{
     if (inext >= ilimit) {
	 ilimit += FLEXML_INDEXSTACKSIZE + 2;
	 {
	     int *temp = (int *) realloc(indexstack, ilimit);
	     assert(temp);
	     indexstack = temp;
	 }
     }
     return 0;
}

#ifdef FLEXML_NEED_BUFFERLIT
static void surfxml_bufferliteral(char c, int* pp, const char* text)
{
   BUFFERSET(*pp);
   if (c) {
      const char *s = strchr(text, c), *e = strrchr(text, c);
      assert(s && e && s <= e);
      ++s;
      while (s < e) {
	 if (isspace(*s)) {
	    BUFFERPUTC(' ');
	    do ++s; while (s < e && isspace(*s));
	 } else
	   BUFFERPUTC(*s++);
      }
   } else {
      const char *s = text;
      while (*s)
	BUFFERPUTC(*s++);
   }
   BUFFERDONE;
}
#endif

static void pushbuffer(int p)
{
    ck_ilimit();
    indexstack[inext++] = p;
    indexstack[inext++] = bnext;    
}

static int popbuffer(void)
{
    assert(inext >= 2);
    bnext = indexstack[--inext];
    return indexstack[--inext];
}

/* General internal entities are `unput' back onto the input stream... */
#define ENTITYTEXT(T) \
  { char *s = (T), *e = s+strlen(s);\
    while (--e >= s) { unput(*e); }}


%}

/* Flex standard options. */
%option stack
%option noyy_top_state
%option noinput
%option noreject
%option noyymore
%option noyywrap

/* Flex user-requested options. */
%option yylineno
%option nounput

/* XML character classes (currently restricted to ASCII). */

/* "Common syntactic structures." */
S		[ \t\n\r\f]+
s		[ \t\n\r\f]*

/* "Names and Tokens." */
NameChar	[A-Za-z0-9.:_-]
Name		[A-Za-z_:]{NameChar}*
Names 		{Name}({S}{Name})*
Nmtoken		({NameChar})+
Nmtokens 	{Nmtoken}({S}{Nmtoken})*

/* Miscellaneous. */
VersionNum	[a-zA-Z0-9_.:-]+
Eq		{s}"="{s}
Literal		\'[^'']*\'|\"[^""]*\"

/* Parser states (flex `exclusive start conditions'):
 *
 * PROLOG	the XML prolog of the document before <?xml...>
 * DOCTYPE	the XML prolog of the document after <?xml...>
 * EPILOG	after the root element
 * INCOMMENT	inside an XML comment <!--....-->
 * INPI		inside an XML PI <?...?>
 * VALUE1	inside a '...'-delimited literal
 * VALUE2	inside a "..."-delimited literal
 * CDATA	inside a <![CDATA[...] ]> section.
 * ROOT_<tag>	expect root element <tag>
 * AL_<tag>	inside the attribute list for <tag>
 * IN_<tag>	inside a <tag> with element contents (ready for end tag)
 * IMPOSSIBLE	dummy to permit disabling rules; must be last
 */
%x PROLOG DOCTYPE EPILOG INCOMMENT INPI VALUE1 VALUE2 CDATA
%x AL_surfxml_AS S_surfxml_AS S_surfxml_AS_1 S_surfxml_AS_2 S_surfxml_AS_3 S_surfxml_AS_4 S_surfxml_AS_5 S_surfxml_AS_6 S_surfxml_AS_7 S_surfxml_AS_8 S_surfxml_AS_9 S_surfxml_AS_10 S_surfxml_AS_11 S_surfxml_AS_12 S_surfxml_AS_13 S_surfxml_AS_14 S_surfxml_AS_15 S_surfxml_AS_16 E_surfxml_AS
%x AL_surfxml_ASroute S_surfxml_ASroute S_surfxml_ASroute_1 S_surfxml_ASroute_2 E_surfxml_ASroute
%x AL_surfxml_actor S_surfxml_actor S_surfxml_actor_1 S_surfxml_actor_2 E_surfxml_actor
%x AL_surfxml_argument E_surfxml_argument
%x AL_surfxml_backbone E_surfxml_backbone
%x AL_surfxml_bypassASroute S_surfxml_bypassASroute S_surfxml_bypassASroute_1 S_surfxml_bypassASroute_2 E_surfxml_bypassASroute
%x AL_surfxml_bypassRoute S_surfxml_bypassRoute S_surfxml_bypassRoute_1 S_surfxml_bypassRoute_2 E_surfxml_bypassRoute
%x AL_surfxml_bypassZoneRoute S_surfxml_bypassZoneRoute S_surfxml_bypassZoneRoute_1 S_surfxml_bypassZoneRoute_2 E_surfxml_bypassZoneRoute
%x AL_surfxml_cabinet E_surfxml_cabinet
%x AL_surfxml_cluster S_surfxml_cluster S_surfxml_cluster_1 S_surfxml_cluster_2 E_surfxml_cluster
%x AL_surfxml_config S_surfxml_config S_surfxml_config_1 S_surfxml_config_2 E_surfxml_config
%x AL_surfxml_host S_surfxml_host S_surfxml_host_1 S_surfxml_host_2 E_surfxml_host
%x AL_surfxml_host___link E_surfxml_host___link
%x AL_surfxml_include S_surfxml_include S_surfxml_include_1 S_surfxml_include_2 E_surfxml_include
%x AL_surfxml_link S_surfxml_link S_surfxml_link_1 S_surfxml_link_2 E_surfxml_link
%x AL_surfxml_link___ctn E_surfxml_link___ctn
%x AL_surfxml_model___prop E_surfxml_model___prop
%x AL_surfxml_mount E_surfxml_mount
%x AL_surfxml_peer E_surfxml_peer
%x ROOT_surfxml_platform AL_surfxml_platform S_surfxml_platform S_surfxml_platform_1 S_surfxml_platform_2 S_surfxml_platform_3 S_surfxml_platform_4 S_surfxml_platform_5 S_surfxml_platform_6 S_surfxml_platform_7 S_surfxml_platform_8 E_surfxml_platform
%x AL_surfxml_process S_surfxml_process S_surfxml_process_1 S_surfxml_process_2 E_surfxml_process
%x AL_surfxml_prop E_surfxml_prop
%x AL_surfxml_random E_surfxml_random
%x AL_surfxml_route S_surfxml_route S_surfxml_route_1 S_surfxml_route_2 E_surfxml_route
%x AL_surfxml_router E_surfxml_router
%x AL_surfxml_storage S_surfxml_storage S_surfxml_storage_1 S_surfxml_storage_2 E_surfxml_storage
%x AL_surfxml_storage___type S_surfxml_storage___type S_surfxml_storage___type_1 S_surfxml_storage___type_2 E_surfxml_storage___type
%x AL_surfxml_trace IN_trace
%x AL_surfxml_trace___connect E_surfxml_trace___connect
%x AL_surfxml_zone S_surfxml_zone S_surfxml_zone_1 S_surfxml_zone_2 S_surfxml_zone_3 S_surfxml_zone_4 S_surfxml_zone_5 S_surfxml_zone_6 S_surfxml_zone_7 S_surfxml_zone_8 S_surfxml_zone_9 S_surfxml_zone_10 S_surfxml_zone_11 S_surfxml_zone_12 S_surfxml_zone_13 S_surfxml_zone_14 S_surfxml_zone_15 S_surfxml_zone_16 E_surfxml_zone
%x AL_surfxml_zoneRoute S_surfxml_zoneRoute S_surfxml_zoneRoute_1 S_surfxml_zoneRoute_2 E_surfxml_zoneRoute
%x IMPOSSIBLE

%{
/* State names. */
const char* *surfxml_statenames=NULL;
%}

%%

 /* Bypass Flex's default INITIAL state and begin by parsing the XML prolog. */
 SET(PROLOG);
 reset_surfxml_parse_err_msg();
 surfxml_bufferstack = (char *) malloc(FLEXML_BUFFERSTACKSIZE);
 assert(surfxml_bufferstack);
 #ifdef FLEX_DEBUG
 {
     int i;
     for (i = 0; i < blimit; i++) {
         surfxml_bufferstack[i] = '\377';
     }
 }
 #endif
 surfxml_bufferstack[0] = '\0';
 indexstack = (int *) malloc(FLEXML_INDEXSTACKSIZE * sizeof(int));
 assert(indexstack);
 indexstack[0] = 0;

  /* FleXML_init */
  bnext = inext = 1;
  surfxml_bufferliteral('\0', &bnext, "0.0");
  surfxml_bufferliteral('\0', &bnext, "2147483647");
  surfxml_bufferliteral('\0', &bnext, "N11");
  surfxml_bufferliteral('\0', &bnext, "1");
  surfxml_bufferliteral('\0', &bnext, "0.0");
  surfxml_bufferliteral('\0', &bnext, "1");
  surfxml_bufferliteral('\0', &bnext, "0s");
  surfxml_bufferliteral('\0', &bnext, "-1.0");
  surfxml_bufferliteral('\0', &bnext, "-1.0");
  surfxml_bufferliteral('\0', &bnext, "-1.0");
  surfxml_bufferliteral('\0', &bnext, "-1.0");
  if(!surfxml_statenames) {surfxml_statenames= (const char **)calloc(IMPOSSIBLE,sizeof(char*));
  surfxml_statenames[PROLOG] = NULL;
  surfxml_statenames[DOCTYPE] = NULL;
  surfxml_statenames[EPILOG] = NULL;
  surfxml_statenames[INCOMMENT] = NULL;
  surfxml_statenames[INPI] = NULL;
  surfxml_statenames[VALUE1] = NULL;
  surfxml_statenames[VALUE2] = NULL;
  surfxml_statenames[CDATA] = NULL;
  surfxml_statenames[AL_surfxml_AS] = NULL;
  surfxml_statenames[S_surfxml_AS] = "AS";
  surfxml_statenames[S_surfxml_AS_1] = "AS";
  surfxml_statenames[S_surfxml_AS_2] = "AS";
  surfxml_statenames[S_surfxml_AS_3] = "AS";
  surfxml_statenames[S_surfxml_AS_4] = "AS";
  surfxml_statenames[S_surfxml_AS_5] = "AS";
  surfxml_statenames[S_surfxml_AS_6] = "AS";
  surfxml_statenames[S_surfxml_AS_7] = "AS";
  surfxml_statenames[S_surfxml_AS_8] = "AS";
  surfxml_statenames[S_surfxml_AS_9] = "AS";
  surfxml_statenames[S_surfxml_AS_10] = "AS";
  surfxml_statenames[S_surfxml_AS_11] = "AS";
  surfxml_statenames[S_surfxml_AS_12] = "AS";
  surfxml_statenames[S_surfxml_AS_13] = "AS";
  surfxml_statenames[S_surfxml_AS_14] = "AS";
  surfxml_statenames[S_surfxml_AS_15] = "AS";
  surfxml_statenames[S_surfxml_AS_16] = "AS";
  surfxml_statenames[E_surfxml_AS] = "AS";
  surfxml_statenames[AL_surfxml_ASroute] = NULL;
  surfxml_statenames[S_surfxml_ASroute] = "ASroute";
  surfxml_statenames[S_surfxml_ASroute_1] = "ASroute";
  surfxml_statenames[S_surfxml_ASroute_2] = "ASroute";
  surfxml_statenames[E_surfxml_ASroute] = "ASroute";
  surfxml_statenames[AL_surfxml_actor] = NULL;
  surfxml_statenames[S_surfxml_actor] = "actor";
  surfxml_statenames[S_surfxml_actor_1] = "actor";
  surfxml_statenames[S_surfxml_actor_2] = "actor";
  surfxml_statenames[E_surfxml_actor] = "actor";
  surfxml_statenames[AL_surfxml_argument] = NULL;
  surfxml_statenames[E_surfxml_argument] = "argument";
  surfxml_statenames[AL_surfxml_backbone] = NULL;
  surfxml_statenames[E_surfxml_backbone] = "backbone";
  surfxml_statenames[AL_surfxml_bypassASroute] = NULL;
  surfxml_statenames[S_surfxml_bypassASroute] = "bypassASroute";
  surfxml_statenames[S_surfxml_bypassASroute_1] = "bypassASroute";
  surfxml_statenames[S_surfxml_bypassASroute_2] = "bypassASroute";
  surfxml_statenames[E_surfxml_bypassASroute] = "bypassASroute";
  surfxml_statenames[AL_surfxml_bypassRoute] = NULL;
  surfxml_statenames[S_surfxml_bypassRoute] = "bypassRoute";
  surfxml_statenames[S_surfxml_bypassRoute_1] = "bypassRoute";
  surfxml_statenames[S_surfxml_bypassRoute_2] = "bypassRoute";
  surfxml_statenames[E_surfxml_bypassRoute] = "bypassRoute";
  surfxml_statenames[AL_surfxml_bypassZoneRoute] = NULL;
  surfxml_statenames[S_surfxml_bypassZoneRoute] = "bypassZoneRoute";
  surfxml_statenames[S_surfxml_bypassZoneRoute_1] = "bypassZoneRoute";
  surfxml_statenames[S_surfxml_bypassZoneRoute_2] = "bypassZoneRoute";
  surfxml_statenames[E_surfxml_bypassZoneRoute] = "bypassZoneRoute";
  surfxml_statenames[AL_surfxml_cabinet] = NULL;
  surfxml_statenames[E_surfxml_cabinet] = "cabinet";
  surfxml_statenames[AL_surfxml_cluster] = NULL;
  surfxml_statenames[S_surfxml_cluster] = "cluster";
  surfxml_statenames[S_surfxml_cluster_1] = "cluster";
  surfxml_statenames[S_surfxml_cluster_2] = "cluster";
  surfxml_statenames[E_surfxml_cluster] = "cluster";
  surfxml_statenames[AL_surfxml_config] = NULL;
  surfxml_statenames[S_surfxml_config] = "config";
  surfxml_statenames[S_surfxml_config_1] = "config";
  surfxml_statenames[S_surfxml_config_2] = "config";
  surfxml_statenames[E_surfxml_config] = "config";
  surfxml_statenames[AL_surfxml_host] = NULL;
  surfxml_statenames[S_surfxml_host] = "host";
  surfxml_statenames[S_surfxml_host_1] = "host";
  surfxml_statenames[S_surfxml_host_2] = "host";
  surfxml_statenames[E_surfxml_host] = "host";
  surfxml_statenames[AL_surfxml_host___link] = NULL;
  surfxml_statenames[E_surfxml_host___link] = "host_link";
  surfxml_statenames[AL_surfxml_include] = NULL;
  surfxml_statenames[S_surfxml_include] = "include";
  surfxml_statenames[S_surfxml_include_1] = "include";
  surfxml_statenames[S_surfxml_include_2] = "include";
  surfxml_statenames[E_surfxml_include] = "include";
  surfxml_statenames[AL_surfxml_link] = NULL;
  surfxml_statenames[S_surfxml_link] = "link";
  surfxml_statenames[S_surfxml_link_1] = "link";
  surfxml_statenames[S_surfxml_link_2] = "link";
  surfxml_statenames[E_surfxml_link] = "link";
  surfxml_statenames[AL_surfxml_link___ctn] = NULL;
  surfxml_statenames[E_surfxml_link___ctn] = "link_ctn";
  surfxml_statenames[AL_surfxml_model___prop] = NULL;
  surfxml_statenames[E_surfxml_model___prop] = "model_prop";
  surfxml_statenames[AL_surfxml_mount] = NULL;
  surfxml_statenames[E_surfxml_mount] = "mount";
  surfxml_statenames[AL_surfxml_peer] = NULL;
  surfxml_statenames[E_surfxml_peer] = "peer";
  surfxml_statenames[ROOT_surfxml_platform] = NULL;
  surfxml_statenames[AL_surfxml_platform] = NULL;
  surfxml_statenames[S_surfxml_platform] = "platform";
  surfxml_statenames[S_surfxml_platform_1] = "platform";
  surfxml_statenames[S_surfxml_platform_2] = "platform";
  surfxml_statenames[S_surfxml_platform_3] = "platform";
  surfxml_statenames[S_surfxml_platform_4] = "platform";
  surfxml_statenames[S_surfxml_platform_5] = "platform";
  surfxml_statenames[S_surfxml_platform_6] = "platform";
  surfxml_statenames[S_surfxml_platform_7] = "platform";
  surfxml_statenames[S_surfxml_platform_8] = "platform";
  surfxml_statenames[E_surfxml_platform] = "platform";
  surfxml_statenames[AL_surfxml_process] = NULL;
  surfxml_statenames[S_surfxml_process] = "process";
  surfxml_statenames[S_surfxml_process_1] = "process";
  surfxml_statenames[S_surfxml_process_2] = "process";
  surfxml_statenames[E_surfxml_process] = "process";
  surfxml_statenames[AL_surfxml_prop] = NULL;
  surfxml_statenames[E_surfxml_prop] = "prop";
  surfxml_statenames[AL_surfxml_random] = NULL;
  surfxml_statenames[E_surfxml_random] = "random";
  surfxml_statenames[AL_surfxml_route] = NULL;
  surfxml_statenames[S_surfxml_route] = "route";
  surfxml_statenames[S_surfxml_route_1] = "route";
  surfxml_statenames[S_surfxml_route_2] = "route";
  surfxml_statenames[E_surfxml_route] = "route";
  surfxml_statenames[AL_surfxml_router] = NULL;
  surfxml_statenames[E_surfxml_router] = "router";
  surfxml_statenames[AL_surfxml_storage] = NULL;
  surfxml_statenames[S_surfxml_storage] = "storage";
  surfxml_statenames[S_surfxml_storage_1] = "storage";
  surfxml_statenames[S_surfxml_storage_2] = "storage";
  surfxml_statenames[E_surfxml_storage] = "storage";
  surfxml_statenames[AL_surfxml_storage___type] = NULL;
  surfxml_statenames[S_surfxml_storage___type] = "storage_type";
  surfxml_statenames[S_surfxml_storage___type_1] = "storage_type";
  surfxml_statenames[S_surfxml_storage___type_2] = "storage_type";
  surfxml_statenames[E_surfxml_storage___type] = "storage_type";
  surfxml_statenames[AL_surfxml_trace] = NULL;
  surfxml_statenames[IN_trace] = "trace";
  surfxml_statenames[AL_surfxml_trace___connect] = NULL;
  surfxml_statenames[E_surfxml_trace___connect] = "trace_connect";
  surfxml_statenames[AL_surfxml_zone] = NULL;
  surfxml_statenames[S_surfxml_zone] = "zone";
  surfxml_statenames[S_surfxml_zone_1] = "zone";
  surfxml_statenames[S_surfxml_zone_2] = "zone";
  surfxml_statenames[S_surfxml_zone_3] = "zone";
  surfxml_statenames[S_surfxml_zone_4] = "zone";
  surfxml_statenames[S_surfxml_zone_5] = "zone";
  surfxml_statenames[S_surfxml_zone_6] = "zone";
  surfxml_statenames[S_surfxml_zone_7] = "zone";
  surfxml_statenames[S_surfxml_zone_8] = "zone";
  surfxml_statenames[S_surfxml_zone_9] = "zone";
  surfxml_statenames[S_surfxml_zone_10] = "zone";
  surfxml_statenames[S_surfxml_zone_11] = "zone";
  surfxml_statenames[S_surfxml_zone_12] = "zone";
  surfxml_statenames[S_surfxml_zone_13] = "zone";
  surfxml_statenames[S_surfxml_zone_14] = "zone";
  surfxml_statenames[S_surfxml_zone_15] = "zone";
  surfxml_statenames[S_surfxml_zone_16] = "zone";
  surfxml_statenames[E_surfxml_zone] = "zone";
  surfxml_statenames[AL_surfxml_zoneRoute] = NULL;
  surfxml_statenames[S_surfxml_zoneRoute] = "zoneRoute";
  surfxml_statenames[S_surfxml_zoneRoute_1] = "zoneRoute";
  surfxml_statenames[S_surfxml_zoneRoute_2] = "zoneRoute";
  surfxml_statenames[E_surfxml_zoneRoute] = "zoneRoute";
  }

 /* COMMENTS and PIs: handled uniformly for efficiency. */

<AL_surfxml_AS,S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_2,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,E_surfxml_AS,AL_surfxml_ASroute,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,E_surfxml_ASroute,AL_surfxml_actor,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,E_surfxml_actor,AL_surfxml_argument,E_surfxml_argument,AL_surfxml_backbone,E_surfxml_backbone,AL_surfxml_bypassASroute,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,E_surfxml_bypassASroute,AL_surfxml_bypassRoute,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,E_surfxml_bypassRoute,AL_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,E_surfxml_bypassZoneRoute,AL_surfxml_cabinet,E_surfxml_cabinet,AL_surfxml_cluster,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,E_surfxml_cluster,AL_surfxml_config,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,E_surfxml_config,AL_surfxml_host,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,E_surfxml_host,AL_surfxml_host___link,E_surfxml_host___link,AL_surfxml_include,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,E_surfxml_include,AL_surfxml_link,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,E_surfxml_link,AL_surfxml_link___ctn,E_surfxml_link___ctn,AL_surfxml_model___prop,E_surfxml_model___prop,AL_surfxml_mount,E_surfxml_mount,AL_surfxml_peer,E_surfxml_peer,ROOT_surfxml_platform,AL_surfxml_platform,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,E_surfxml_platform,AL_surfxml_process,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,E_surfxml_process,AL_surfxml_prop,E_surfxml_prop,AL_surfxml_random,E_surfxml_random,AL_surfxml_route,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,E_surfxml_route,AL_surfxml_router,E_surfxml_router,AL_surfxml_storage,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,E_surfxml_storage,AL_surfxml_storage___type,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,E_surfxml_storage___type,AL_surfxml_trace,IN_trace,AL_surfxml_trace___connect,E_surfxml_trace___connect,AL_surfxml_zone,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_2,S_surfxml_zone_3,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,E_surfxml_zone,AL_surfxml_zoneRoute,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,E_surfxml_zoneRoute,PROLOG,DOCTYPE,EPILOG>{
 "<!--" ENTER(INCOMMENT);
 "<?" ENTER(INPI);
}
<INCOMMENT>{
 "-->"		LEAVE;
 "--"		|
 .		|
 \n		SKIP;
 <<EOF>>	FAIL("EOF in comment.");
}
<INPI>{
 "?>"		LEAVE;
 .		|
 \n		SKIP;
 <<EOF>>	FAIL("EOF in PI (processing instruction).");
}

 /* SPACES: skipped uniformly */

<AL_surfxml_AS,S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_2,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,E_surfxml_AS,AL_surfxml_ASroute,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,E_surfxml_ASroute,AL_surfxml_actor,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,E_surfxml_actor,AL_surfxml_argument,E_surfxml_argument,AL_surfxml_backbone,E_surfxml_backbone,AL_surfxml_bypassASroute,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,E_surfxml_bypassASroute,AL_surfxml_bypassRoute,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,E_surfxml_bypassRoute,AL_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,E_surfxml_bypassZoneRoute,AL_surfxml_cabinet,E_surfxml_cabinet,AL_surfxml_cluster,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,E_surfxml_cluster,AL_surfxml_config,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,E_surfxml_config,AL_surfxml_host,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,E_surfxml_host,AL_surfxml_host___link,E_surfxml_host___link,AL_surfxml_include,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,E_surfxml_include,AL_surfxml_link,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,E_surfxml_link,AL_surfxml_link___ctn,E_surfxml_link___ctn,AL_surfxml_model___prop,E_surfxml_model___prop,AL_surfxml_mount,E_surfxml_mount,AL_surfxml_peer,E_surfxml_peer,ROOT_surfxml_platform,AL_surfxml_platform,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,E_surfxml_platform,AL_surfxml_process,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,E_surfxml_process,AL_surfxml_prop,E_surfxml_prop,AL_surfxml_random,E_surfxml_random,AL_surfxml_route,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,E_surfxml_route,AL_surfxml_router,E_surfxml_router,AL_surfxml_storage,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,E_surfxml_storage,AL_surfxml_storage___type,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,E_surfxml_storage___type,AL_surfxml_trace,AL_surfxml_trace___connect,E_surfxml_trace___connect,AL_surfxml_zone,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_2,S_surfxml_zone_3,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,E_surfxml_zone,AL_surfxml_zoneRoute,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,E_surfxml_zoneRoute,PROLOG,DOCTYPE,EPILOG>{S} SKIP;

 /* PROLOG: determine root element and process it. */

<PROLOG>{
 "<?xml"({S}version{Eq}(\'{VersionNum}\'|\"{VersionNum}\"))?({S}encoding{Eq}(\'[^']*\'|\"[^"]*\"))?"?>" SET(DOCTYPE); 
 "<?xml"[^>]*">" FAIL("Bad declaration %s.\nIf your are using a XML v3 file (check the version attribute in <platform>), please update it with tools/simgrid_update_xml.pl",yytext);
}

<PROLOG,DOCTYPE>{
 "<!DOCTYPE"{S}"platform"{S}SYSTEM{S}("'http://simgrid.gforge.inria.fr/simgrid/simgrid.dtd'"|"\"http://simgrid.gforge.inria.fr/simgrid/simgrid.dtd\""){s}">" SET(ROOT_surfxml_platform);
 "<!"[^>-][^>]*">" FAIL("Bad declaration %s.\nIf your are using a XML v3 file (check the version attribute in <platform>), please update it with tools/simgrid_update_xml.pl",yytext);
 . 		FAIL("Unexpected character `%c' in prolog.", yytext[0]);
 <<EOF>> 	FAIL("EOF in prolog.");
}

 /* RULES DERIVED FROM DTD. */

 /* <!-- A zone is either an internal node that contains other zones, 
  *      or a  leaf containing hosts and other leaf-like elements -->
  *           (((AS|zone|include|link|backbone|cabinet|cluster|peer|trace|trace_connect)*,
  * 	    (zoneRoute|ASroute|trace|trace_connect|bypassASroute|bypassZoneRoute)*,
  * 	    (trace|trace_connect)*)
  * 	   |((include|storage_type|storage|host|cabinet|router|link|backbone|trace|trace_connect|host_link)*,
  * 	     (route|trace|trace_connect|bypassRoute)*)))>  */

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_4,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform_2,S_surfxml_platform_4,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_4,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<AS"{s} FAIL("Starting tag <AS> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_3,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_3,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_3,S_surfxml_zone_5,S_surfxml_zone_6>"<AS"{s} {
  AX_surfxml_AS_id = 0;
  surfxml_AS_id_isset = 0;
  AX_surfxml_AS_routing = AU_surfxml_AS_routing;
  surfxml_AS_routing_isset = 0;
  ENTER(AL_surfxml_AS); pushbuffer(0);
  }

<AL_surfxml_AS>{
 "id"{Eq}\' if (surfxml_AS_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_AS>");} surfxml_AS_id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_AS_id);
 "id"{Eq}\" if (surfxml_AS_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_AS>");}  surfxml_AS_id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_AS_id);

 "routing"{Eq}"'Full'" |
 "routing"{Eq}"\"Full\"" A_surfxml_AS_routing = A_surfxml_AS_routing_Full;
 "routing"{Eq}"'Floyd'" |
 "routing"{Eq}"\"Floyd\"" A_surfxml_AS_routing = A_surfxml_AS_routing_Floyd;
 "routing"{Eq}"'Dijkstra'" |
 "routing"{Eq}"\"Dijkstra\"" A_surfxml_AS_routing = A_surfxml_AS_routing_Dijkstra;
 "routing"{Eq}"'DijkstraCache'" |
 "routing"{Eq}"\"DijkstraCache\"" A_surfxml_AS_routing = A_surfxml_AS_routing_DijkstraCache;
 "routing"{Eq}"'None'" |
 "routing"{Eq}"\"None\"" A_surfxml_AS_routing = A_surfxml_AS_routing_None;
 "routing"{Eq}"'Vivaldi'" |
 "routing"{Eq}"\"Vivaldi\"" A_surfxml_AS_routing = A_surfxml_AS_routing_Vivaldi;
 "routing"{Eq}"'Cluster'" |
 "routing"{Eq}"\"Cluster\"" A_surfxml_AS_routing = A_surfxml_AS_routing_Cluster;
 "routing"{Eq}"'ClusterTorus'" |
 "routing"{Eq}"\"ClusterTorus\"" A_surfxml_AS_routing = A_surfxml_AS_routing_ClusterTorus;
 "routing"{Eq}"'ClusterFatTree'" |
 "routing"{Eq}"\"ClusterFatTree\"" A_surfxml_AS_routing = A_surfxml_AS_routing_ClusterFatTree;
 "routing"{Eq}"'ClusterDragonfly'" |
 "routing"{Eq}"\"ClusterDragonfly\"" A_surfxml_AS_routing = A_surfxml_AS_routing_ClusterDragonfly;
 "routing"{Eq}"'ClusterOptElecSimple'" |
 "routing"{Eq}"\"ClusterOptElecSimple\"" A_surfxml_AS_routing = A_surfxml_AS_routing_ClusterOptElecSimple;
 "routing"{Eq}"'ClusterOptElecFatTree'" |
 "routing"{Eq}"\"ClusterOptElecFatTree\"" A_surfxml_AS_routing = A_surfxml_AS_routing_ClusterOptElecFatTree;

 ">" {
  if (!AX_surfxml_AS_id) FAIL("Required attribute `id' not set for `AS' element.");
  if (!AX_surfxml_AS_routing) FAIL("Required attribute `routing' not set for `AS' element.");
  LEAVE; STag_surfxml_AS();surfxml_pcdata_ix = 0; ENTER(S_surfxml_AS);
 }
 "/>" {
  if (!AX_surfxml_AS_id) FAIL("Required attribute `id' not set for `AS' element.");
  if (!AX_surfxml_AS_routing) FAIL("Required attribute `routing' not set for `AS' element.");
  LEAVE; STag_surfxml_AS(); surfxml_pcdata_ix = 0; ETag_surfxml_AS(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_5: case S_surfxml_AS_6: SET(S_surfxml_AS_6); break;
   case S_surfxml_include: case S_surfxml_include_1: case S_surfxml_include_2: SET(S_surfxml_include_2); break;
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_5: case S_surfxml_platform_6: SET(S_surfxml_platform_6); break;
   case S_surfxml_zone: case S_surfxml_zone_1: case S_surfxml_zone_3: case S_surfxml_zone_5: case S_surfxml_zone_6: SET(S_surfxml_zone_6); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of AS element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `AS' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `AS' element.");
}

<E_surfxml_AS,S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_14,S_surfxml_AS_16,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_9>{
 "</AS"{s}">" {
  LEAVE;
  ETag_surfxml_AS();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_5: case S_surfxml_AS_6: SET(S_surfxml_AS_6); break;
   case S_surfxml_include: case S_surfxml_include_1: case S_surfxml_include_2: SET(S_surfxml_include_2); break;
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_5: case S_surfxml_platform_6: SET(S_surfxml_platform_6); break;
   case S_surfxml_zone: case S_surfxml_zone_1: case S_surfxml_zone_3: case S_surfxml_zone_5: case S_surfxml_zone_6: SET(S_surfxml_zone_6); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</AS>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</AS>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</AS>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_5,S_surfxml_AS_7,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_5,S_surfxml_zone_7>"<ASroute"{s} FAIL("Starting tag <ASroute> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_6,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_3,S_surfxml_zone_4,S_surfxml_zone_6,S_surfxml_zone_8,S_surfxml_zone_9>"<ASroute"{s} {
  AX_surfxml_ASroute_dst = 0;
  surfxml_ASroute_dst_isset = 0;
  AX_surfxml_ASroute_gw___dst = 0;
  surfxml_ASroute_gw___dst_isset = 0;
  AX_surfxml_ASroute_gw___src = 0;
  surfxml_ASroute_gw___src_isset = 0;
  AX_surfxml_ASroute_src = 0;
  surfxml_ASroute_src_isset = 0;
  AX_surfxml_ASroute_symmetrical = A_surfxml_ASroute_symmetrical_YES;
  surfxml_ASroute_symmetrical_isset = 0;
  ENTER(AL_surfxml_ASroute); pushbuffer(0);
  }

<AL_surfxml_ASroute>{
 "dst"{Eq}\' if (surfxml_ASroute_dst_isset != 0) {FAIL("Multiple definition of attribute dst in <surfxml_ASroute>");} surfxml_ASroute_dst_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_ASroute_dst);
 "dst"{Eq}\" if (surfxml_ASroute_dst_isset != 0) {FAIL("Multiple definition of attribute dst in <surfxml_ASroute>");}  surfxml_ASroute_dst_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_ASroute_dst);

 "gw_dst"{Eq}\' if (surfxml_ASroute_gw___dst_isset != 0) {FAIL("Multiple definition of attribute gw_dst in <surfxml_ASroute>");} surfxml_ASroute_gw___dst_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_ASroute_gw___dst);
 "gw_dst"{Eq}\" if (surfxml_ASroute_gw___dst_isset != 0) {FAIL("Multiple definition of attribute gw_dst in <surfxml_ASroute>");}  surfxml_ASroute_gw___dst_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_ASroute_gw___dst);

 "gw_src"{Eq}\' if (surfxml_ASroute_gw___src_isset != 0) {FAIL("Multiple definition of attribute gw_src in <surfxml_ASroute>");} surfxml_ASroute_gw___src_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_ASroute_gw___src);
 "gw_src"{Eq}\" if (surfxml_ASroute_gw___src_isset != 0) {FAIL("Multiple definition of attribute gw_src in <surfxml_ASroute>");}  surfxml_ASroute_gw___src_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_ASroute_gw___src);

 "src"{Eq}\' if (surfxml_ASroute_src_isset != 0) {FAIL("Multiple definition of attribute src in <surfxml_ASroute>");} surfxml_ASroute_src_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_ASroute_src);
 "src"{Eq}\" if (surfxml_ASroute_src_isset != 0) {FAIL("Multiple definition of attribute src in <surfxml_ASroute>");}  surfxml_ASroute_src_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_ASroute_src);

 "symmetrical"{Eq}"'YES'" |
 "symmetrical"{Eq}"\"YES\"" A_surfxml_ASroute_symmetrical = A_surfxml_ASroute_symmetrical_YES;
 "symmetrical"{Eq}"'NO'" |
 "symmetrical"{Eq}"\"NO\"" A_surfxml_ASroute_symmetrical = A_surfxml_ASroute_symmetrical_NO;
 "symmetrical"{Eq}"'yes'" |
 "symmetrical"{Eq}"\"yes\"" A_surfxml_ASroute_symmetrical = A_surfxml_ASroute_symmetrical_yes;
 "symmetrical"{Eq}"'no'" |
 "symmetrical"{Eq}"\"no\"" A_surfxml_ASroute_symmetrical = A_surfxml_ASroute_symmetrical_no;

 ">" {
  if (!AX_surfxml_ASroute_dst) FAIL("Required attribute `dst' not set for `ASroute' element.");
  if (!AX_surfxml_ASroute_gw___dst) FAIL("Required attribute `gw_dst' not set for `ASroute' element.");
  if (!AX_surfxml_ASroute_gw___src) FAIL("Required attribute `gw_src' not set for `ASroute' element.");
  if (!AX_surfxml_ASroute_src) FAIL("Required attribute `src' not set for `ASroute' element.");
  LEAVE; STag_surfxml_ASroute();surfxml_pcdata_ix = 0; ENTER(S_surfxml_ASroute);
 }
 "/>" {
  if (!AX_surfxml_ASroute_dst) FAIL("Required attribute `dst' not set for `ASroute' element.");
  if (!AX_surfxml_ASroute_gw___dst) FAIL("Required attribute `gw_dst' not set for `ASroute' element.");
  if (!AX_surfxml_ASroute_gw___src) FAIL("Required attribute `gw_src' not set for `ASroute' element.");
  if (!AX_surfxml_ASroute_src) FAIL("Required attribute `src' not set for `ASroute' element.");
  LEAVE; STag_surfxml_ASroute(); surfxml_pcdata_ix = 0; ETag_surfxml_ASroute(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_4: case S_surfxml_AS_6: case S_surfxml_AS_8: case S_surfxml_AS_9: SET(S_surfxml_AS_9); break;
   case S_surfxml_zone: case S_surfxml_zone_1: case S_surfxml_zone_3: case S_surfxml_zone_4: case S_surfxml_zone_6: case S_surfxml_zone_8: case S_surfxml_zone_9: SET(S_surfxml_zone_9); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of ASroute element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `ASroute' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `ASroute' element.");
}

<E_surfxml_ASroute,S_surfxml_ASroute,S_surfxml_ASroute_2>{
 "</ASroute"{s}">" {
  LEAVE;
  ETag_surfxml_ASroute();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_4: case S_surfxml_AS_6: case S_surfxml_AS_8: case S_surfxml_AS_9: SET(S_surfxml_AS_9); break;
   case S_surfxml_zone: case S_surfxml_zone_1: case S_surfxml_zone_3: case S_surfxml_zone_4: case S_surfxml_zone_6: case S_surfxml_zone_8: case S_surfxml_zone_9: SET(S_surfxml_zone_9); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</ASroute>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</ASroute>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</ASroute>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform_2,S_surfxml_platform_5,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zone,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_1,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_3,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<actor"{s} FAIL("Starting tag <actor> is not allowed here.");

<S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8>"<actor"{s} {
  AX_surfxml_actor_function = 0;
  surfxml_actor_function_isset = 0;
  AX_surfxml_actor_host = 0;
  surfxml_actor_host_isset = 0;
  AX_surfxml_actor_kill___time = 46;
  surfxml_actor_kill___time_isset = 0;
  AX_surfxml_actor_on___failure = A_surfxml_actor_on___failure_DIE;
  surfxml_actor_on___failure_isset = 0;
  AX_surfxml_actor_start___time = 41;
  surfxml_actor_start___time_isset = 0;
  ENTER(AL_surfxml_actor); pushbuffer(0);
  }

<AL_surfxml_actor>{
 "function"{Eq}\' if (surfxml_actor_function_isset != 0) {FAIL("Multiple definition of attribute function in <surfxml_actor>");} surfxml_actor_function_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_actor_function);
 "function"{Eq}\" if (surfxml_actor_function_isset != 0) {FAIL("Multiple definition of attribute function in <surfxml_actor>");}  surfxml_actor_function_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_actor_function);

 "host"{Eq}\' if (surfxml_actor_host_isset != 0) {FAIL("Multiple definition of attribute host in <surfxml_actor>");} surfxml_actor_host_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_actor_host);
 "host"{Eq}\" if (surfxml_actor_host_isset != 0) {FAIL("Multiple definition of attribute host in <surfxml_actor>");}  surfxml_actor_host_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_actor_host);

 "kill_time"{Eq}\' if (surfxml_actor_kill___time_isset != 0) {FAIL("Multiple definition of attribute kill_time in <surfxml_actor>");} surfxml_actor_kill___time_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_actor_kill___time);
 "kill_time"{Eq}\" if (surfxml_actor_kill___time_isset != 0) {FAIL("Multiple definition of attribute kill_time in <surfxml_actor>");}  surfxml_actor_kill___time_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_actor_kill___time);

 "on_failure"{Eq}"'DIE'" |
 "on_failure"{Eq}"\"DIE\"" A_surfxml_actor_on___failure = A_surfxml_actor_on___failure_DIE;
 "on_failure"{Eq}"'RESTART'" |
 "on_failure"{Eq}"\"RESTART\"" A_surfxml_actor_on___failure = A_surfxml_actor_on___failure_RESTART;

 "start_time"{Eq}\' if (surfxml_actor_start___time_isset != 0) {FAIL("Multiple definition of attribute start_time in <surfxml_actor>");} surfxml_actor_start___time_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_actor_start___time);
 "start_time"{Eq}\" if (surfxml_actor_start___time_isset != 0) {FAIL("Multiple definition of attribute start_time in <surfxml_actor>");}  surfxml_actor_start___time_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_actor_start___time);

 ">" {
  if (!AX_surfxml_actor_function) FAIL("Required attribute `function' not set for `actor' element.");
  if (!AX_surfxml_actor_host) FAIL("Required attribute `host' not set for `actor' element.");
  LEAVE; STag_surfxml_actor();surfxml_pcdata_ix = 0; ENTER(S_surfxml_actor);
 }
 "/>" {
  if (!AX_surfxml_actor_function) FAIL("Required attribute `function' not set for `actor' element.");
  if (!AX_surfxml_actor_host) FAIL("Required attribute `host' not set for `actor' element.");
  LEAVE; STag_surfxml_actor(); surfxml_pcdata_ix = 0; ETag_surfxml_actor(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_4: case S_surfxml_platform_6: case S_surfxml_platform_7: case S_surfxml_platform_8: SET(S_surfxml_platform_8); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of actor element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `actor' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `actor' element.");
}

<E_surfxml_actor,S_surfxml_actor,S_surfxml_actor_2>{
 "</actor"{s}">" {
  LEAVE;
  ETag_surfxml_actor();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_4: case S_surfxml_platform_6: case S_surfxml_platform_7: case S_surfxml_platform_8: SET(S_surfxml_platform_8); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</actor>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</actor>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</actor>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zone,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_1,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_3,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<argument"{s} FAIL("Starting tag <argument> is not allowed here.");

<S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2>"<argument"{s} {
  AX_surfxml_argument_value = 0;
  surfxml_argument_value_isset = 0;
  ENTER(AL_surfxml_argument); pushbuffer(0);
  }

<AL_surfxml_argument>{
 "value"{Eq}\' if (surfxml_argument_value_isset != 0) {FAIL("Multiple definition of attribute value in <surfxml_argument>");} surfxml_argument_value_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_argument_value);
 "value"{Eq}\" if (surfxml_argument_value_isset != 0) {FAIL("Multiple definition of attribute value in <surfxml_argument>");}  surfxml_argument_value_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_argument_value);

 ">" {
  if (!AX_surfxml_argument_value) FAIL("Required attribute `value' not set for `argument' element.");
  LEAVE; STag_surfxml_argument();surfxml_pcdata_ix = 0; ENTER(E_surfxml_argument);
 }
 "/>" {
  if (!AX_surfxml_argument_value) FAIL("Required attribute `value' not set for `argument' element.");
  LEAVE; STag_surfxml_argument(); surfxml_pcdata_ix = 0; ETag_surfxml_argument(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_actor: case S_surfxml_actor_1: case S_surfxml_actor_2: SET(S_surfxml_actor_2); break;
   case S_surfxml_process: case S_surfxml_process_1: case S_surfxml_process_2: SET(S_surfxml_process_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of argument element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `argument' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `argument' element.");
}

<E_surfxml_argument>{
 "</argument"{s}">" {
  LEAVE;
  ETag_surfxml_argument();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_actor: case S_surfxml_actor_1: case S_surfxml_actor_2: SET(S_surfxml_actor_2); break;
   case S_surfxml_process: case S_surfxml_process_1: case S_surfxml_process_2: SET(S_surfxml_process_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</argument>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</argument>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</argument>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_4,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_4,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<backbone"{s} FAIL("Starting tag <backbone> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_3,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_3,S_surfxml_zone_5,S_surfxml_zone_6>"<backbone"{s} {
  AX_surfxml_backbone_bandwidth = 0;
  surfxml_backbone_bandwidth_isset = 0;
  AX_surfxml_backbone_id = 0;
  surfxml_backbone_id_isset = 0;
  AX_surfxml_backbone_latency = 0;
  surfxml_backbone_latency_isset = 0;
  ENTER(AL_surfxml_backbone); pushbuffer(0);
  }

<AL_surfxml_backbone>{
 "bandwidth"{Eq}\' if (surfxml_backbone_bandwidth_isset != 0) {FAIL("Multiple definition of attribute bandwidth in <surfxml_backbone>");} surfxml_backbone_bandwidth_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_backbone_bandwidth);
 "bandwidth"{Eq}\" if (surfxml_backbone_bandwidth_isset != 0) {FAIL("Multiple definition of attribute bandwidth in <surfxml_backbone>");}  surfxml_backbone_bandwidth_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_backbone_bandwidth);

 "id"{Eq}\' if (surfxml_backbone_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_backbone>");} surfxml_backbone_id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_backbone_id);
 "id"{Eq}\" if (surfxml_backbone_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_backbone>");}  surfxml_backbone_id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_backbone_id);

 "latency"{Eq}\' if (surfxml_backbone_latency_isset != 0) {FAIL("Multiple definition of attribute latency in <surfxml_backbone>");} surfxml_backbone_latency_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_backbone_latency);
 "latency"{Eq}\" if (surfxml_backbone_latency_isset != 0) {FAIL("Multiple definition of attribute latency in <surfxml_backbone>");}  surfxml_backbone_latency_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_backbone_latency);

 ">" {
  if (!AX_surfxml_backbone_bandwidth) FAIL("Required attribute `bandwidth' not set for `backbone' element.");
  if (!AX_surfxml_backbone_id) FAIL("Required attribute `id' not set for `backbone' element.");
  if (!AX_surfxml_backbone_latency) FAIL("Required attribute `latency' not set for `backbone' element.");
  LEAVE; STag_surfxml_backbone();surfxml_pcdata_ix = 0; ENTER(E_surfxml_backbone);
 }
 "/>" {
  if (!AX_surfxml_backbone_bandwidth) FAIL("Required attribute `bandwidth' not set for `backbone' element.");
  if (!AX_surfxml_backbone_id) FAIL("Required attribute `id' not set for `backbone' element.");
  if (!AX_surfxml_backbone_latency) FAIL("Required attribute `latency' not set for `backbone' element.");
  LEAVE; STag_surfxml_backbone(); surfxml_pcdata_ix = 0; ETag_surfxml_backbone(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_13: case S_surfxml_AS_14: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_14); break;
   case S_surfxml_AS: case S_surfxml_AS_5: case S_surfxml_AS_6: SET(S_surfxml_AS_6); break;
   case S_surfxml_zone: case S_surfxml_zone_13: case S_surfxml_zone_14: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
   case S_surfxml_zone_1: case S_surfxml_zone_5: case S_surfxml_zone_6: SET(S_surfxml_zone_6); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of backbone element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `backbone' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `backbone' element.");
}

<E_surfxml_backbone>{
 "</backbone"{s}">" {
  LEAVE;
  ETag_surfxml_backbone();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_13: case S_surfxml_AS_14: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_14); break;
   case S_surfxml_AS: case S_surfxml_AS_5: case S_surfxml_AS_6: SET(S_surfxml_AS_6); break;
   case S_surfxml_zone: case S_surfxml_zone_13: case S_surfxml_zone_14: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
   case S_surfxml_zone_1: case S_surfxml_zone_5: case S_surfxml_zone_6: SET(S_surfxml_zone_6); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</backbone>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</backbone>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</backbone>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_5,S_surfxml_AS_7,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_5,S_surfxml_zone_7>"<bypassASroute"{s} FAIL("Starting tag <bypassASroute> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_6,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_3,S_surfxml_zone_4,S_surfxml_zone_6,S_surfxml_zone_8,S_surfxml_zone_9>"<bypassASroute"{s} {
  AX_surfxml_bypassASroute_dst = 0;
  surfxml_bypassASroute_dst_isset = 0;
  AX_surfxml_bypassASroute_gw___dst = 0;
  surfxml_bypassASroute_gw___dst_isset = 0;
  AX_surfxml_bypassASroute_gw___src = 0;
  surfxml_bypassASroute_gw___src_isset = 0;
  AX_surfxml_bypassASroute_src = 0;
  surfxml_bypassASroute_src_isset = 0;
  ENTER(AL_surfxml_bypassASroute); pushbuffer(0);
  }

<AL_surfxml_bypassASroute>{
 "dst"{Eq}\' if (surfxml_bypassASroute_dst_isset != 0) {FAIL("Multiple definition of attribute dst in <surfxml_bypassASroute>");} surfxml_bypassASroute_dst_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_bypassASroute_dst);
 "dst"{Eq}\" if (surfxml_bypassASroute_dst_isset != 0) {FAIL("Multiple definition of attribute dst in <surfxml_bypassASroute>");}  surfxml_bypassASroute_dst_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_bypassASroute_dst);

 "gw_dst"{Eq}\' if (surfxml_bypassASroute_gw___dst_isset != 0) {FAIL("Multiple definition of attribute gw_dst in <surfxml_bypassASroute>");} surfxml_bypassASroute_gw___dst_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_bypassASroute_gw___dst);
 "gw_dst"{Eq}\" if (surfxml_bypassASroute_gw___dst_isset != 0) {FAIL("Multiple definition of attribute gw_dst in <surfxml_bypassASroute>");}  surfxml_bypassASroute_gw___dst_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_bypassASroute_gw___dst);

 "gw_src"{Eq}\' if (surfxml_bypassASroute_gw___src_isset != 0) {FAIL("Multiple definition of attribute gw_src in <surfxml_bypassASroute>");} surfxml_bypassASroute_gw___src_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_bypassASroute_gw___src);
 "gw_src"{Eq}\" if (surfxml_bypassASroute_gw___src_isset != 0) {FAIL("Multiple definition of attribute gw_src in <surfxml_bypassASroute>");}  surfxml_bypassASroute_gw___src_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_bypassASroute_gw___src);

 "src"{Eq}\' if (surfxml_bypassASroute_src_isset != 0) {FAIL("Multiple definition of attribute src in <surfxml_bypassASroute>");} surfxml_bypassASroute_src_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_bypassASroute_src);
 "src"{Eq}\" if (surfxml_bypassASroute_src_isset != 0) {FAIL("Multiple definition of attribute src in <surfxml_bypassASroute>");}  surfxml_bypassASroute_src_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_bypassASroute_src);

 ">" {
  if (!AX_surfxml_bypassASroute_dst) FAIL("Required attribute `dst' not set for `bypassASroute' element.");
  if (!AX_surfxml_bypassASroute_gw___dst) FAIL("Required attribute `gw_dst' not set for `bypassASroute' element.");
  if (!AX_surfxml_bypassASroute_gw___src) FAIL("Required attribute `gw_src' not set for `bypassASroute' element.");
  if (!AX_surfxml_bypassASroute_src) FAIL("Required attribute `src' not set for `bypassASroute' element.");
  LEAVE; STag_surfxml_bypassASroute();surfxml_pcdata_ix = 0; ENTER(S_surfxml_bypassASroute);
 }
 "/>" {
  if (!AX_surfxml_bypassASroute_dst) FAIL("Required attribute `dst' not set for `bypassASroute' element.");
  if (!AX_surfxml_bypassASroute_gw___dst) FAIL("Required attribute `gw_dst' not set for `bypassASroute' element.");
  if (!AX_surfxml_bypassASroute_gw___src) FAIL("Required attribute `gw_src' not set for `bypassASroute' element.");
  if (!AX_surfxml_bypassASroute_src) FAIL("Required attribute `src' not set for `bypassASroute' element.");
  LEAVE; STag_surfxml_bypassASroute(); surfxml_pcdata_ix = 0; ETag_surfxml_bypassASroute(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_4: case S_surfxml_AS_6: case S_surfxml_AS_8: case S_surfxml_AS_9: SET(S_surfxml_AS_9); break;
   case S_surfxml_zone: case S_surfxml_zone_1: case S_surfxml_zone_3: case S_surfxml_zone_4: case S_surfxml_zone_6: case S_surfxml_zone_8: case S_surfxml_zone_9: SET(S_surfxml_zone_9); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of bypassASroute element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `bypassASroute' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `bypassASroute' element.");
}

<E_surfxml_bypassASroute,S_surfxml_bypassASroute,S_surfxml_bypassASroute_2>{
 "</bypassASroute"{s}">" {
  LEAVE;
  ETag_surfxml_bypassASroute();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_4: case S_surfxml_AS_6: case S_surfxml_AS_8: case S_surfxml_AS_9: SET(S_surfxml_AS_9); break;
   case S_surfxml_zone: case S_surfxml_zone_1: case S_surfxml_zone_3: case S_surfxml_zone_4: case S_surfxml_zone_6: case S_surfxml_zone_8: case S_surfxml_zone_9: SET(S_surfxml_zone_9); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</bypassASroute>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</bypassASroute>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</bypassASroute>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_13,S_surfxml_AS_2,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_13,S_surfxml_zone_2,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<bypassRoute"{s} FAIL("Starting tag <bypassRoute> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_12,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_3,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_12,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_3>"<bypassRoute"{s} {
  AX_surfxml_bypassRoute_dst = 0;
  surfxml_bypassRoute_dst_isset = 0;
  AX_surfxml_bypassRoute_src = 0;
  surfxml_bypassRoute_src_isset = 0;
  ENTER(AL_surfxml_bypassRoute); pushbuffer(0);
  }

<AL_surfxml_bypassRoute>{
 "dst"{Eq}\' if (surfxml_bypassRoute_dst_isset != 0) {FAIL("Multiple definition of attribute dst in <surfxml_bypassRoute>");} surfxml_bypassRoute_dst_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_bypassRoute_dst);
 "dst"{Eq}\" if (surfxml_bypassRoute_dst_isset != 0) {FAIL("Multiple definition of attribute dst in <surfxml_bypassRoute>");}  surfxml_bypassRoute_dst_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_bypassRoute_dst);

 "src"{Eq}\' if (surfxml_bypassRoute_src_isset != 0) {FAIL("Multiple definition of attribute src in <surfxml_bypassRoute>");} surfxml_bypassRoute_src_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_bypassRoute_src);
 "src"{Eq}\" if (surfxml_bypassRoute_src_isset != 0) {FAIL("Multiple definition of attribute src in <surfxml_bypassRoute>");}  surfxml_bypassRoute_src_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_bypassRoute_src);

 ">" {
  if (!AX_surfxml_bypassRoute_dst) FAIL("Required attribute `dst' not set for `bypassRoute' element.");
  if (!AX_surfxml_bypassRoute_src) FAIL("Required attribute `src' not set for `bypassRoute' element.");
  LEAVE; STag_surfxml_bypassRoute();surfxml_pcdata_ix = 0; ENTER(S_surfxml_bypassRoute);
 }
 "/>" {
  if (!AX_surfxml_bypassRoute_dst) FAIL("Required attribute `dst' not set for `bypassRoute' element.");
  if (!AX_surfxml_bypassRoute_src) FAIL("Required attribute `src' not set for `bypassRoute' element.");
  LEAVE; STag_surfxml_bypassRoute(); surfxml_pcdata_ix = 0; ETag_surfxml_bypassRoute(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_12: case S_surfxml_AS_14: case S_surfxml_AS_15: case S_surfxml_AS_16: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_16); break;
   case S_surfxml_zone: case S_surfxml_zone_12: case S_surfxml_zone_14: case S_surfxml_zone_15: case S_surfxml_zone_16: case S_surfxml_zone_1: case S_surfxml_zone_3: SET(S_surfxml_zone_16); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of bypassRoute element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `bypassRoute' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `bypassRoute' element.");
}

<E_surfxml_bypassRoute,S_surfxml_bypassRoute,S_surfxml_bypassRoute_2>{
 "</bypassRoute"{s}">" {
  LEAVE;
  ETag_surfxml_bypassRoute();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_12: case S_surfxml_AS_14: case S_surfxml_AS_15: case S_surfxml_AS_16: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_16); break;
   case S_surfxml_zone: case S_surfxml_zone_12: case S_surfxml_zone_14: case S_surfxml_zone_15: case S_surfxml_zone_16: case S_surfxml_zone_1: case S_surfxml_zone_3: SET(S_surfxml_zone_16); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</bypassRoute>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</bypassRoute>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</bypassRoute>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_5,S_surfxml_AS_7,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_5,S_surfxml_zone_7>"<bypassZoneRoute"{s} FAIL("Starting tag <bypassZoneRoute> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_6,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_3,S_surfxml_zone_4,S_surfxml_zone_6,S_surfxml_zone_8,S_surfxml_zone_9>"<bypassZoneRoute"{s} {
  AX_surfxml_bypassZoneRoute_dst = 0;
  surfxml_bypassZoneRoute_dst_isset = 0;
  AX_surfxml_bypassZoneRoute_gw___dst = 0;
  surfxml_bypassZoneRoute_gw___dst_isset = 0;
  AX_surfxml_bypassZoneRoute_gw___src = 0;
  surfxml_bypassZoneRoute_gw___src_isset = 0;
  AX_surfxml_bypassZoneRoute_src = 0;
  surfxml_bypassZoneRoute_src_isset = 0;
  ENTER(AL_surfxml_bypassZoneRoute); pushbuffer(0);
  }

<AL_surfxml_bypassZoneRoute>{
 "dst"{Eq}\' if (surfxml_bypassZoneRoute_dst_isset != 0) {FAIL("Multiple definition of attribute dst in <surfxml_bypassZoneRoute>");} surfxml_bypassZoneRoute_dst_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_bypassZoneRoute_dst);
 "dst"{Eq}\" if (surfxml_bypassZoneRoute_dst_isset != 0) {FAIL("Multiple definition of attribute dst in <surfxml_bypassZoneRoute>");}  surfxml_bypassZoneRoute_dst_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_bypassZoneRoute_dst);

 "gw_dst"{Eq}\' if (surfxml_bypassZoneRoute_gw___dst_isset != 0) {FAIL("Multiple definition of attribute gw_dst in <surfxml_bypassZoneRoute>");} surfxml_bypassZoneRoute_gw___dst_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_bypassZoneRoute_gw___dst);
 "gw_dst"{Eq}\" if (surfxml_bypassZoneRoute_gw___dst_isset != 0) {FAIL("Multiple definition of attribute gw_dst in <surfxml_bypassZoneRoute>");}  surfxml_bypassZoneRoute_gw___dst_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_bypassZoneRoute_gw___dst);

 "gw_src"{Eq}\' if (surfxml_bypassZoneRoute_gw___src_isset != 0) {FAIL("Multiple definition of attribute gw_src in <surfxml_bypassZoneRoute>");} surfxml_bypassZoneRoute_gw___src_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_bypassZoneRoute_gw___src);
 "gw_src"{Eq}\" if (surfxml_bypassZoneRoute_gw___src_isset != 0) {FAIL("Multiple definition of attribute gw_src in <surfxml_bypassZoneRoute>");}  surfxml_bypassZoneRoute_gw___src_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_bypassZoneRoute_gw___src);

 "src"{Eq}\' if (surfxml_bypassZoneRoute_src_isset != 0) {FAIL("Multiple definition of attribute src in <surfxml_bypassZoneRoute>");} surfxml_bypassZoneRoute_src_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_bypassZoneRoute_src);
 "src"{Eq}\" if (surfxml_bypassZoneRoute_src_isset != 0) {FAIL("Multiple definition of attribute src in <surfxml_bypassZoneRoute>");}  surfxml_bypassZoneRoute_src_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_bypassZoneRoute_src);

 ">" {
  if (!AX_surfxml_bypassZoneRoute_dst) FAIL("Required attribute `dst' not set for `bypassZoneRoute' element.");
  if (!AX_surfxml_bypassZoneRoute_gw___dst) FAIL("Required attribute `gw_dst' not set for `bypassZoneRoute' element.");
  if (!AX_surfxml_bypassZoneRoute_gw___src) FAIL("Required attribute `gw_src' not set for `bypassZoneRoute' element.");
  if (!AX_surfxml_bypassZoneRoute_src) FAIL("Required attribute `src' not set for `bypassZoneRoute' element.");
  LEAVE; STag_surfxml_bypassZoneRoute();surfxml_pcdata_ix = 0; ENTER(S_surfxml_bypassZoneRoute);
 }
 "/>" {
  if (!AX_surfxml_bypassZoneRoute_dst) FAIL("Required attribute `dst' not set for `bypassZoneRoute' element.");
  if (!AX_surfxml_bypassZoneRoute_gw___dst) FAIL("Required attribute `gw_dst' not set for `bypassZoneRoute' element.");
  if (!AX_surfxml_bypassZoneRoute_gw___src) FAIL("Required attribute `gw_src' not set for `bypassZoneRoute' element.");
  if (!AX_surfxml_bypassZoneRoute_src) FAIL("Required attribute `src' not set for `bypassZoneRoute' element.");
  LEAVE; STag_surfxml_bypassZoneRoute(); surfxml_pcdata_ix = 0; ETag_surfxml_bypassZoneRoute(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_4: case S_surfxml_AS_6: case S_surfxml_AS_8: case S_surfxml_AS_9: SET(S_surfxml_AS_9); break;
   case S_surfxml_zone: case S_surfxml_zone_1: case S_surfxml_zone_3: case S_surfxml_zone_4: case S_surfxml_zone_6: case S_surfxml_zone_8: case S_surfxml_zone_9: SET(S_surfxml_zone_9); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of bypassZoneRoute element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `bypassZoneRoute' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `bypassZoneRoute' element.");
}

<E_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_2>{
 "</bypassZoneRoute"{s}">" {
  LEAVE;
  ETag_surfxml_bypassZoneRoute();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_4: case S_surfxml_AS_6: case S_surfxml_AS_8: case S_surfxml_AS_9: SET(S_surfxml_AS_9); break;
   case S_surfxml_zone: case S_surfxml_zone_1: case S_surfxml_zone_3: case S_surfxml_zone_4: case S_surfxml_zone_6: case S_surfxml_zone_8: case S_surfxml_zone_9: SET(S_surfxml_zone_9); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</bypassZoneRoute>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</bypassZoneRoute>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</bypassZoneRoute>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_4,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform_2,S_surfxml_platform_4,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_4,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<cabinet"{s} FAIL("Starting tag <cabinet> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_3,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_3,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_3,S_surfxml_zone_5,S_surfxml_zone_6>"<cabinet"{s} {
  AX_surfxml_cabinet_bw = 0;
  surfxml_cabinet_bw_isset = 0;
  AX_surfxml_cabinet_id = 0;
  surfxml_cabinet_id_isset = 0;
  AX_surfxml_cabinet_lat = 0;
  surfxml_cabinet_lat_isset = 0;
  AX_surfxml_cabinet_prefix = 0;
  surfxml_cabinet_prefix_isset = 0;
  AX_surfxml_cabinet_radical = 0;
  surfxml_cabinet_radical_isset = 0;
  AX_surfxml_cabinet_speed = 0;
  surfxml_cabinet_speed_isset = 0;
  AX_surfxml_cabinet_suffix = 0;
  surfxml_cabinet_suffix_isset = 0;
  ENTER(AL_surfxml_cabinet); pushbuffer(0);
  }

<AL_surfxml_cabinet>{
 "bw"{Eq}\' if (surfxml_cabinet_bw_isset != 0) {FAIL("Multiple definition of attribute bw in <surfxml_cabinet>");} surfxml_cabinet_bw_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cabinet_bw);
 "bw"{Eq}\" if (surfxml_cabinet_bw_isset != 0) {FAIL("Multiple definition of attribute bw in <surfxml_cabinet>");}  surfxml_cabinet_bw_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cabinet_bw);

 "id"{Eq}\' if (surfxml_cabinet_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_cabinet>");} surfxml_cabinet_id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cabinet_id);
 "id"{Eq}\" if (surfxml_cabinet_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_cabinet>");}  surfxml_cabinet_id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cabinet_id);

 "lat"{Eq}\' if (surfxml_cabinet_lat_isset != 0) {FAIL("Multiple definition of attribute lat in <surfxml_cabinet>");} surfxml_cabinet_lat_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cabinet_lat);
 "lat"{Eq}\" if (surfxml_cabinet_lat_isset != 0) {FAIL("Multiple definition of attribute lat in <surfxml_cabinet>");}  surfxml_cabinet_lat_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cabinet_lat);

 "prefix"{Eq}\' if (surfxml_cabinet_prefix_isset != 0) {FAIL("Multiple definition of attribute prefix in <surfxml_cabinet>");} surfxml_cabinet_prefix_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cabinet_prefix);
 "prefix"{Eq}\" if (surfxml_cabinet_prefix_isset != 0) {FAIL("Multiple definition of attribute prefix in <surfxml_cabinet>");}  surfxml_cabinet_prefix_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cabinet_prefix);

 "radical"{Eq}\' if (surfxml_cabinet_radical_isset != 0) {FAIL("Multiple definition of attribute radical in <surfxml_cabinet>");} surfxml_cabinet_radical_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cabinet_radical);
 "radical"{Eq}\" if (surfxml_cabinet_radical_isset != 0) {FAIL("Multiple definition of attribute radical in <surfxml_cabinet>");}  surfxml_cabinet_radical_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cabinet_radical);

 "speed"{Eq}\' if (surfxml_cabinet_speed_isset != 0) {FAIL("Multiple definition of attribute speed in <surfxml_cabinet>");} surfxml_cabinet_speed_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cabinet_speed);
 "speed"{Eq}\" if (surfxml_cabinet_speed_isset != 0) {FAIL("Multiple definition of attribute speed in <surfxml_cabinet>");}  surfxml_cabinet_speed_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cabinet_speed);

 "suffix"{Eq}\' if (surfxml_cabinet_suffix_isset != 0) {FAIL("Multiple definition of attribute suffix in <surfxml_cabinet>");} surfxml_cabinet_suffix_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cabinet_suffix);
 "suffix"{Eq}\" if (surfxml_cabinet_suffix_isset != 0) {FAIL("Multiple definition of attribute suffix in <surfxml_cabinet>");}  surfxml_cabinet_suffix_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cabinet_suffix);

 ">" {
  if (!AX_surfxml_cabinet_bw) FAIL("Required attribute `bw' not set for `cabinet' element.");
  if (!AX_surfxml_cabinet_id) FAIL("Required attribute `id' not set for `cabinet' element.");
  if (!AX_surfxml_cabinet_lat) FAIL("Required attribute `lat' not set for `cabinet' element.");
  if (!AX_surfxml_cabinet_prefix) FAIL("Required attribute `prefix' not set for `cabinet' element.");
  if (!AX_surfxml_cabinet_radical) FAIL("Required attribute `radical' not set for `cabinet' element.");
  if (!AX_surfxml_cabinet_speed) FAIL("Required attribute `speed' not set for `cabinet' element.");
  if (!AX_surfxml_cabinet_suffix) FAIL("Required attribute `suffix' not set for `cabinet' element.");
  LEAVE; STag_surfxml_cabinet();surfxml_pcdata_ix = 0; ENTER(E_surfxml_cabinet);
 }
 "/>" {
  if (!AX_surfxml_cabinet_bw) FAIL("Required attribute `bw' not set for `cabinet' element.");
  if (!AX_surfxml_cabinet_id) FAIL("Required attribute `id' not set for `cabinet' element.");
  if (!AX_surfxml_cabinet_lat) FAIL("Required attribute `lat' not set for `cabinet' element.");
  if (!AX_surfxml_cabinet_prefix) FAIL("Required attribute `prefix' not set for `cabinet' element.");
  if (!AX_surfxml_cabinet_radical) FAIL("Required attribute `radical' not set for `cabinet' element.");
  if (!AX_surfxml_cabinet_speed) FAIL("Required attribute `speed' not set for `cabinet' element.");
  if (!AX_surfxml_cabinet_suffix) FAIL("Required attribute `suffix' not set for `cabinet' element.");
  LEAVE; STag_surfxml_cabinet(); surfxml_pcdata_ix = 0; ETag_surfxml_cabinet(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_13: case S_surfxml_AS_14: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_14); break;
   case S_surfxml_AS: case S_surfxml_AS_5: case S_surfxml_AS_6: SET(S_surfxml_AS_6); break;
   case S_surfxml_include: case S_surfxml_include_1: case S_surfxml_include_2: SET(S_surfxml_include_2); break;
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_5: case S_surfxml_platform_6: SET(S_surfxml_platform_6); break;
   case S_surfxml_zone: case S_surfxml_zone_13: case S_surfxml_zone_14: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
   case S_surfxml_zone_1: case S_surfxml_zone_5: case S_surfxml_zone_6: SET(S_surfxml_zone_6); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of cabinet element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `cabinet' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `cabinet' element.");
}

<E_surfxml_cabinet>{
 "</cabinet"{s}">" {
  LEAVE;
  ETag_surfxml_cabinet();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_13: case S_surfxml_AS_14: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_14); break;
   case S_surfxml_AS: case S_surfxml_AS_5: case S_surfxml_AS_6: SET(S_surfxml_AS_6); break;
   case S_surfxml_include: case S_surfxml_include_1: case S_surfxml_include_2: SET(S_surfxml_include_2); break;
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_5: case S_surfxml_platform_6: SET(S_surfxml_platform_6); break;
   case S_surfxml_zone: case S_surfxml_zone_13: case S_surfxml_zone_14: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
   case S_surfxml_zone_1: case S_surfxml_zone_5: case S_surfxml_zone_6: SET(S_surfxml_zone_6); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</cabinet>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</cabinet>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</cabinet>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_4,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform_2,S_surfxml_platform_4,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_4,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<cluster"{s} FAIL("Starting tag <cluster> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_3,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_3,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_3,S_surfxml_zone_5,S_surfxml_zone_6>"<cluster"{s} {
  AX_surfxml_cluster_bb___bw = 0;
  surfxml_cluster_bb___bw_isset = 0;
  AX_surfxml_cluster_bb___lat = 28;
  surfxml_cluster_bb___lat_isset = 0;
  AX_surfxml_cluster_bb___sharing___policy = A_surfxml_cluster_bb___sharing___policy_SHARED;
  surfxml_cluster_bb___sharing___policy_isset = 0;
  AX_surfxml_cluster_bw = 0;
  surfxml_cluster_bw_isset = 0;
  AX_surfxml_cluster_core = 26;
  surfxml_cluster_core_isset = 0;
  AX_surfxml_cluster_id = 0;
  surfxml_cluster_id_isset = 0;
  AX_surfxml_cluster_lat = 0;
  surfxml_cluster_lat_isset = 0;
  AX_surfxml_cluster_limiter___link = 0;
  surfxml_cluster_limiter___link_isset = 0;
  AX_surfxml_cluster_loopback___bw = 0;
  surfxml_cluster_loopback___bw_isset = 0;
  AX_surfxml_cluster_loopback___lat = 0;
  surfxml_cluster_loopback___lat_isset = 0;
  AX_surfxml_cluster_prefix = 0;
  surfxml_cluster_prefix_isset = 0;
  AX_surfxml_cluster_radical = 0;
  surfxml_cluster_radical_isset = 0;
  AX_surfxml_cluster_router___id = 0;
  surfxml_cluster_router___id_isset = 0;
  AX_surfxml_cluster_sharing___policy = A_surfxml_cluster_sharing___policy_SPLITDUPLEX;
  surfxml_cluster_sharing___policy_isset = 0;
  AX_surfxml_cluster_speed = 0;
  surfxml_cluster_speed_isset = 0;
  AX_surfxml_cluster_suffix = 0;
  surfxml_cluster_suffix_isset = 0;
  AX_surfxml_cluster_topo___parameters = 0;
  surfxml_cluster_topo___parameters_isset = 0;
  AX_surfxml_cluster_topology = A_surfxml_cluster_topology_FLAT;
  surfxml_cluster_topology_isset = 0;
  ENTER(AL_surfxml_cluster); pushbuffer(0);
  }

<AL_surfxml_cluster>{
 "bb_bw"{Eq}\' if (surfxml_cluster_bb___bw_isset != 0) {FAIL("Multiple definition of attribute bb_bw in <surfxml_cluster>");} surfxml_cluster_bb___bw_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_bb___bw);
 "bb_bw"{Eq}\" if (surfxml_cluster_bb___bw_isset != 0) {FAIL("Multiple definition of attribute bb_bw in <surfxml_cluster>");}  surfxml_cluster_bb___bw_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_bb___bw);

 "bb_lat"{Eq}\' if (surfxml_cluster_bb___lat_isset != 0) {FAIL("Multiple definition of attribute bb_lat in <surfxml_cluster>");} surfxml_cluster_bb___lat_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_bb___lat);
 "bb_lat"{Eq}\" if (surfxml_cluster_bb___lat_isset != 0) {FAIL("Multiple definition of attribute bb_lat in <surfxml_cluster>");}  surfxml_cluster_bb___lat_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_bb___lat);

 "bb_sharing_policy"{Eq}"'SHARED'" |
 "bb_sharing_policy"{Eq}"\"SHARED\"" A_surfxml_cluster_bb___sharing___policy = A_surfxml_cluster_bb___sharing___policy_SHARED;
 "bb_sharing_policy"{Eq}"'FATPIPE'" |
 "bb_sharing_policy"{Eq}"\"FATPIPE\"" A_surfxml_cluster_bb___sharing___policy = A_surfxml_cluster_bb___sharing___policy_FATPIPE;

 "bw"{Eq}\' if (surfxml_cluster_bw_isset != 0) {FAIL("Multiple definition of attribute bw in <surfxml_cluster>");} surfxml_cluster_bw_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_bw);
 "bw"{Eq}\" if (surfxml_cluster_bw_isset != 0) {FAIL("Multiple definition of attribute bw in <surfxml_cluster>");}  surfxml_cluster_bw_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_bw);

 "core"{Eq}\' if (surfxml_cluster_core_isset != 0) {FAIL("Multiple definition of attribute core in <surfxml_cluster>");} surfxml_cluster_core_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_core);
 "core"{Eq}\" if (surfxml_cluster_core_isset != 0) {FAIL("Multiple definition of attribute core in <surfxml_cluster>");}  surfxml_cluster_core_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_core);

 "id"{Eq}\' if (surfxml_cluster_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_cluster>");} surfxml_cluster_id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_id);
 "id"{Eq}\" if (surfxml_cluster_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_cluster>");}  surfxml_cluster_id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_id);

 "lat"{Eq}\' if (surfxml_cluster_lat_isset != 0) {FAIL("Multiple definition of attribute lat in <surfxml_cluster>");} surfxml_cluster_lat_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_lat);
 "lat"{Eq}\" if (surfxml_cluster_lat_isset != 0) {FAIL("Multiple definition of attribute lat in <surfxml_cluster>");}  surfxml_cluster_lat_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_lat);

 "limiter_link"{Eq}\' if (surfxml_cluster_limiter___link_isset != 0) {FAIL("Multiple definition of attribute limiter_link in <surfxml_cluster>");} surfxml_cluster_limiter___link_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_limiter___link);
 "limiter_link"{Eq}\" if (surfxml_cluster_limiter___link_isset != 0) {FAIL("Multiple definition of attribute limiter_link in <surfxml_cluster>");}  surfxml_cluster_limiter___link_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_limiter___link);

 "loopback_bw"{Eq}\' if (surfxml_cluster_loopback___bw_isset != 0) {FAIL("Multiple definition of attribute loopback_bw in <surfxml_cluster>");} surfxml_cluster_loopback___bw_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_loopback___bw);
 "loopback_bw"{Eq}\" if (surfxml_cluster_loopback___bw_isset != 0) {FAIL("Multiple definition of attribute loopback_bw in <surfxml_cluster>");}  surfxml_cluster_loopback___bw_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_loopback___bw);

 "loopback_lat"{Eq}\' if (surfxml_cluster_loopback___lat_isset != 0) {FAIL("Multiple definition of attribute loopback_lat in <surfxml_cluster>");} surfxml_cluster_loopback___lat_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_loopback___lat);
 "loopback_lat"{Eq}\" if (surfxml_cluster_loopback___lat_isset != 0) {FAIL("Multiple definition of attribute loopback_lat in <surfxml_cluster>");}  surfxml_cluster_loopback___lat_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_loopback___lat);

 "prefix"{Eq}\' if (surfxml_cluster_prefix_isset != 0) {FAIL("Multiple definition of attribute prefix in <surfxml_cluster>");} surfxml_cluster_prefix_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_prefix);
 "prefix"{Eq}\" if (surfxml_cluster_prefix_isset != 0) {FAIL("Multiple definition of attribute prefix in <surfxml_cluster>");}  surfxml_cluster_prefix_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_prefix);

 "radical"{Eq}\' if (surfxml_cluster_radical_isset != 0) {FAIL("Multiple definition of attribute radical in <surfxml_cluster>");} surfxml_cluster_radical_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_radical);
 "radical"{Eq}\" if (surfxml_cluster_radical_isset != 0) {FAIL("Multiple definition of attribute radical in <surfxml_cluster>");}  surfxml_cluster_radical_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_radical);

 "router_id"{Eq}\' if (surfxml_cluster_router___id_isset != 0) {FAIL("Multiple definition of attribute router_id in <surfxml_cluster>");} surfxml_cluster_router___id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_router___id);
 "router_id"{Eq}\" if (surfxml_cluster_router___id_isset != 0) {FAIL("Multiple definition of attribute router_id in <surfxml_cluster>");}  surfxml_cluster_router___id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_router___id);

 "sharing_policy"{Eq}"'SHARED'" |
 "sharing_policy"{Eq}"\"SHARED\"" A_surfxml_cluster_sharing___policy = A_surfxml_cluster_sharing___policy_SHARED;
 "sharing_policy"{Eq}"'SPLITDUPLEX'" |
 "sharing_policy"{Eq}"\"SPLITDUPLEX\"" A_surfxml_cluster_sharing___policy = A_surfxml_cluster_sharing___policy_SPLITDUPLEX;
 "sharing_policy"{Eq}"'FULLDUPLEX'" |
 "sharing_policy"{Eq}"\"FULLDUPLEX\"" A_surfxml_cluster_sharing___policy = A_surfxml_cluster_sharing___policy_FULLDUPLEX;
 "sharing_policy"{Eq}"'FATPIPE'" |
 "sharing_policy"{Eq}"\"FATPIPE\"" A_surfxml_cluster_sharing___policy = A_surfxml_cluster_sharing___policy_FATPIPE;

 "speed"{Eq}\' if (surfxml_cluster_speed_isset != 0) {FAIL("Multiple definition of attribute speed in <surfxml_cluster>");} surfxml_cluster_speed_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_speed);
 "speed"{Eq}\" if (surfxml_cluster_speed_isset != 0) {FAIL("Multiple definition of attribute speed in <surfxml_cluster>");}  surfxml_cluster_speed_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_speed);

 "suffix"{Eq}\' if (surfxml_cluster_suffix_isset != 0) {FAIL("Multiple definition of attribute suffix in <surfxml_cluster>");} surfxml_cluster_suffix_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_suffix);
 "suffix"{Eq}\" if (surfxml_cluster_suffix_isset != 0) {FAIL("Multiple definition of attribute suffix in <surfxml_cluster>");}  surfxml_cluster_suffix_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_suffix);

 "topo_parameters"{Eq}\' if (surfxml_cluster_topo___parameters_isset != 0) {FAIL("Multiple definition of attribute topo_parameters in <surfxml_cluster>");} surfxml_cluster_topo___parameters_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_cluster_topo___parameters);
 "topo_parameters"{Eq}\" if (surfxml_cluster_topo___parameters_isset != 0) {FAIL("Multiple definition of attribute topo_parameters in <surfxml_cluster>");}  surfxml_cluster_topo___parameters_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_cluster_topo___parameters);

 "topology"{Eq}"'FLAT'" |
 "topology"{Eq}"\"FLAT\"" A_surfxml_cluster_topology = A_surfxml_cluster_topology_FLAT;
 "topology"{Eq}"'TORUS'" |
 "topology"{Eq}"\"TORUS\"" A_surfxml_cluster_topology = A_surfxml_cluster_topology_TORUS;
 "topology"{Eq}"'FAT_TREE'" |
 "topology"{Eq}"\"FAT_TREE\"" A_surfxml_cluster_topology = A_surfxml_cluster_topology_FAT___TREE;
 "topology"{Eq}"'DRAGONFLY'" |
 "topology"{Eq}"\"DRAGONFLY\"" A_surfxml_cluster_topology = A_surfxml_cluster_topology_DRAGONFLY;
 "topology"{Eq}"'OPT_ELEC_SIMPLE'" |
 "topology"{Eq}"\"OPT_ELEC_SIMPLE\"" A_surfxml_cluster_topology = A_surfxml_cluster_topology_OPT___ELEC___SIMPLE;
 "topology"{Eq}"'OPT_ELEC_FAT_TREE'" |
 "topology"{Eq}"\"OPT_ELEC_FAT_TREE\"" A_surfxml_cluster_topology = A_surfxml_cluster_topology_OPT___ELEC___FAT___TREE;

 ">" {
  if (!AX_surfxml_cluster_bw) FAIL("Required attribute `bw' not set for `cluster' element.");
  if (!AX_surfxml_cluster_id) FAIL("Required attribute `id' not set for `cluster' element.");
  if (!AX_surfxml_cluster_lat) FAIL("Required attribute `lat' not set for `cluster' element.");
  if (!AX_surfxml_cluster_prefix) FAIL("Required attribute `prefix' not set for `cluster' element.");
  if (!AX_surfxml_cluster_radical) FAIL("Required attribute `radical' not set for `cluster' element.");
  if (!AX_surfxml_cluster_speed) FAIL("Required attribute `speed' not set for `cluster' element.");
  if (!AX_surfxml_cluster_suffix) FAIL("Required attribute `suffix' not set for `cluster' element.");
  LEAVE; STag_surfxml_cluster();surfxml_pcdata_ix = 0; ENTER(S_surfxml_cluster);
 }
 "/>" {
  if (!AX_surfxml_cluster_bw) FAIL("Required attribute `bw' not set for `cluster' element.");
  if (!AX_surfxml_cluster_id) FAIL("Required attribute `id' not set for `cluster' element.");
  if (!AX_surfxml_cluster_lat) FAIL("Required attribute `lat' not set for `cluster' element.");
  if (!AX_surfxml_cluster_prefix) FAIL("Required attribute `prefix' not set for `cluster' element.");
  if (!AX_surfxml_cluster_radical) FAIL("Required attribute `radical' not set for `cluster' element.");
  if (!AX_surfxml_cluster_speed) FAIL("Required attribute `speed' not set for `cluster' element.");
  if (!AX_surfxml_cluster_suffix) FAIL("Required attribute `suffix' not set for `cluster' element.");
  LEAVE; STag_surfxml_cluster(); surfxml_pcdata_ix = 0; ETag_surfxml_cluster(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_5: case S_surfxml_AS_6: SET(S_surfxml_AS_6); break;
   case S_surfxml_include: case S_surfxml_include_1: case S_surfxml_include_2: SET(S_surfxml_include_2); break;
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_5: case S_surfxml_platform_6: SET(S_surfxml_platform_6); break;
   case S_surfxml_zone: case S_surfxml_zone_1: case S_surfxml_zone_3: case S_surfxml_zone_5: case S_surfxml_zone_6: SET(S_surfxml_zone_6); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of cluster element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `cluster' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `cluster' element.");
}

<E_surfxml_cluster,S_surfxml_cluster,S_surfxml_cluster_2>{
 "</cluster"{s}">" {
  LEAVE;
  ETag_surfxml_cluster();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_5: case S_surfxml_AS_6: SET(S_surfxml_AS_6); break;
   case S_surfxml_include: case S_surfxml_include_1: case S_surfxml_include_2: SET(S_surfxml_include_2); break;
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_5: case S_surfxml_platform_6: SET(S_surfxml_platform_6); break;
   case S_surfxml_zone: case S_surfxml_zone_1: case S_surfxml_zone_3: case S_surfxml_zone_5: case S_surfxml_zone_6: SET(S_surfxml_zone_6); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</cluster>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</cluster>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</cluster>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform_1,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zone,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_1,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_3,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<config"{s} FAIL("Starting tag <config> is not allowed here.");

<S_surfxml_platform,S_surfxml_platform_2,S_surfxml_platform_3>"<config"{s} {
  AX_surfxml_config_id = 0;
  surfxml_config_id_isset = 0;
  ENTER(AL_surfxml_config); pushbuffer(0);
  }

<AL_surfxml_config>{
 "id"{Eq}\' if (surfxml_config_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_config>");} surfxml_config_id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_config_id);
 "id"{Eq}\" if (surfxml_config_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_config>");}  surfxml_config_id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_config_id);

 ">" {
  LEAVE; STag_surfxml_config();surfxml_pcdata_ix = 0; ENTER(S_surfxml_config);
 }
 "/>" {
  LEAVE; STag_surfxml_config(); surfxml_pcdata_ix = 0; ETag_surfxml_config(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_platform: case S_surfxml_platform_2: case S_surfxml_platform_3: SET(S_surfxml_platform_3); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of config element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `config' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `config' element.");
}

<E_surfxml_config,S_surfxml_config,S_surfxml_config_2>{
 "</config"{s}">" {
  LEAVE;
  ETag_surfxml_config();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_platform: case S_surfxml_platform_2: case S_surfxml_platform_3: SET(S_surfxml_platform_3); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</config>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</config>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</config>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<host"{s} FAIL("Starting tag <host> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_3,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_3>"<host"{s} {
  AX_surfxml_host_availability___file = 0;
  surfxml_host_availability___file_isset = 0;
  AX_surfxml_host_coordinates = 0;
  surfxml_host_coordinates_isset = 0;
  AX_surfxml_host_core = 20;
  surfxml_host_core_isset = 0;
  AX_surfxml_host_id = 0;
  surfxml_host_id_isset = 0;
  AX_surfxml_host_pstate = 22;
  surfxml_host_pstate_isset = 0;
  AX_surfxml_host_speed = 0;
  surfxml_host_speed_isset = 0;
  AX_surfxml_host_state___file = 0;
  surfxml_host_state___file_isset = 0;
  ENTER(AL_surfxml_host); pushbuffer(0);
  }

<AL_surfxml_host>{
 "availability_file"{Eq}\' if (surfxml_host_availability___file_isset != 0) {FAIL("Multiple definition of attribute availability_file in <surfxml_host>");} surfxml_host_availability___file_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_host_availability___file);
 "availability_file"{Eq}\" if (surfxml_host_availability___file_isset != 0) {FAIL("Multiple definition of attribute availability_file in <surfxml_host>");}  surfxml_host_availability___file_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_host_availability___file);

 "coordinates"{Eq}\' if (surfxml_host_coordinates_isset != 0) {FAIL("Multiple definition of attribute coordinates in <surfxml_host>");} surfxml_host_coordinates_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_host_coordinates);
 "coordinates"{Eq}\" if (surfxml_host_coordinates_isset != 0) {FAIL("Multiple definition of attribute coordinates in <surfxml_host>");}  surfxml_host_coordinates_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_host_coordinates);

 "core"{Eq}\' if (surfxml_host_core_isset != 0) {FAIL("Multiple definition of attribute core in <surfxml_host>");} surfxml_host_core_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_host_core);
 "core"{Eq}\" if (surfxml_host_core_isset != 0) {FAIL("Multiple definition of attribute core in <surfxml_host>");}  surfxml_host_core_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_host_core);

 "id"{Eq}\' if (surfxml_host_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_host>");} surfxml_host_id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_host_id);
 "id"{Eq}\" if (surfxml_host_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_host>");}  surfxml_host_id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_host_id);

 "pstate"{Eq}\' if (surfxml_host_pstate_isset != 0) {FAIL("Multiple definition of attribute pstate in <surfxml_host>");} surfxml_host_pstate_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_host_pstate);
 "pstate"{Eq}\" if (surfxml_host_pstate_isset != 0) {FAIL("Multiple definition of attribute pstate in <surfxml_host>");}  surfxml_host_pstate_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_host_pstate);

 "speed"{Eq}\' if (surfxml_host_speed_isset != 0) {FAIL("Multiple definition of attribute speed in <surfxml_host>");} surfxml_host_speed_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_host_speed);
 "speed"{Eq}\" if (surfxml_host_speed_isset != 0) {FAIL("Multiple definition of attribute speed in <surfxml_host>");}  surfxml_host_speed_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_host_speed);

 "state_file"{Eq}\' if (surfxml_host_state___file_isset != 0) {FAIL("Multiple definition of attribute state_file in <surfxml_host>");} surfxml_host_state___file_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_host_state___file);
 "state_file"{Eq}\" if (surfxml_host_state___file_isset != 0) {FAIL("Multiple definition of attribute state_file in <surfxml_host>");}  surfxml_host_state___file_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_host_state___file);

 ">" {
  if (!AX_surfxml_host_id) FAIL("Required attribute `id' not set for `host' element.");
  if (!AX_surfxml_host_speed) FAIL("Required attribute `speed' not set for `host' element.");
  LEAVE; STag_surfxml_host();surfxml_pcdata_ix = 0; ENTER(S_surfxml_host);
 }
 "/>" {
  if (!AX_surfxml_host_id) FAIL("Required attribute `id' not set for `host' element.");
  if (!AX_surfxml_host_speed) FAIL("Required attribute `speed' not set for `host' element.");
  LEAVE; STag_surfxml_host(); surfxml_pcdata_ix = 0; ETag_surfxml_host(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_13: case S_surfxml_AS_14: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_14); break;
   case S_surfxml_zone: case S_surfxml_zone_13: case S_surfxml_zone_14: case S_surfxml_zone_1: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of host element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `host' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `host' element.");
}

<E_surfxml_host,S_surfxml_host,S_surfxml_host_2>{
 "</host"{s}">" {
  LEAVE;
  ETag_surfxml_host();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_13: case S_surfxml_AS_14: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_14); break;
   case S_surfxml_zone: case S_surfxml_zone_13: case S_surfxml_zone_14: case S_surfxml_zone_1: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</host>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</host>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</host>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<host_link"{s} FAIL("Starting tag <host_link> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_3,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_3>"<host_link"{s} {
  AX_surfxml_host___link_down = 0;
  surfxml_host___link_down_isset = 0;
  AX_surfxml_host___link_id = 0;
  surfxml_host___link_id_isset = 0;
  AX_surfxml_host___link_up = 0;
  surfxml_host___link_up_isset = 0;
  ENTER(AL_surfxml_host___link); pushbuffer(0);
  }

<AL_surfxml_host___link>{
 "down"{Eq}\' if (surfxml_host___link_down_isset != 0) {FAIL("Multiple definition of attribute down in <surfxml_host___link>");} surfxml_host___link_down_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_host___link_down);
 "down"{Eq}\" if (surfxml_host___link_down_isset != 0) {FAIL("Multiple definition of attribute down in <surfxml_host___link>");}  surfxml_host___link_down_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_host___link_down);

 "id"{Eq}\' if (surfxml_host___link_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_host___link>");} surfxml_host___link_id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_host___link_id);
 "id"{Eq}\" if (surfxml_host___link_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_host___link>");}  surfxml_host___link_id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_host___link_id);

 "up"{Eq}\' if (surfxml_host___link_up_isset != 0) {FAIL("Multiple definition of attribute up in <surfxml_host___link>");} surfxml_host___link_up_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_host___link_up);
 "up"{Eq}\" if (surfxml_host___link_up_isset != 0) {FAIL("Multiple definition of attribute up in <surfxml_host___link>");}  surfxml_host___link_up_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_host___link_up);

 ">" {
  if (!AX_surfxml_host___link_down) FAIL("Required attribute `down' not set for `host_link' element.");
  if (!AX_surfxml_host___link_id) FAIL("Required attribute `id' not set for `host_link' element.");
  if (!AX_surfxml_host___link_up) FAIL("Required attribute `up' not set for `host_link' element.");
  LEAVE; STag_surfxml_host___link();surfxml_pcdata_ix = 0; ENTER(E_surfxml_host___link);
 }
 "/>" {
  if (!AX_surfxml_host___link_down) FAIL("Required attribute `down' not set for `host_link' element.");
  if (!AX_surfxml_host___link_id) FAIL("Required attribute `id' not set for `host_link' element.");
  if (!AX_surfxml_host___link_up) FAIL("Required attribute `up' not set for `host_link' element.");
  LEAVE; STag_surfxml_host___link(); surfxml_pcdata_ix = 0; ETag_surfxml_host___link(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_13: case S_surfxml_AS_14: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_14); break;
   case S_surfxml_zone: case S_surfxml_zone_13: case S_surfxml_zone_14: case S_surfxml_zone_1: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of host_link element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `host_link' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `host_link' element.");
}

<E_surfxml_host___link>{
 "</host_link"{s}">" {
  LEAVE;
  ETag_surfxml_host___link();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_13: case S_surfxml_AS_14: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_14); break;
   case S_surfxml_zone: case S_surfxml_zone_13: case S_surfxml_zone_14: case S_surfxml_zone_1: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</host_link>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</host_link>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</host_link>' expected.");
}

 /* <!-- tag include is deprecated. Not documented, and removed in v3.22 -->  */

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_4,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform_2,S_surfxml_platform_4,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_4,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<include"{s} FAIL("Starting tag <include> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_3,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_3,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_3,S_surfxml_zone_5,S_surfxml_zone_6>"<include"{s} {
  AX_surfxml_include_file = 0;
  surfxml_include_file_isset = 0;
  ENTER(AL_surfxml_include); pushbuffer(0);
  }

<AL_surfxml_include>{
 "file"{Eq}\' if (surfxml_include_file_isset != 0) {FAIL("Multiple definition of attribute file in <surfxml_include>");} surfxml_include_file_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_include_file);
 "file"{Eq}\" if (surfxml_include_file_isset != 0) {FAIL("Multiple definition of attribute file in <surfxml_include>");}  surfxml_include_file_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_include_file);

 ">" {
  if (!AX_surfxml_include_file) FAIL("Required attribute `file' not set for `include' element.");
  LEAVE; STag_surfxml_include();surfxml_pcdata_ix = 0; ENTER(S_surfxml_include);
 }
 "/>" {
  if (!AX_surfxml_include_file) FAIL("Required attribute `file' not set for `include' element.");
  LEAVE; STag_surfxml_include(); surfxml_pcdata_ix = 0; ETag_surfxml_include(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_13: case S_surfxml_AS_14: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_14); break;
   case S_surfxml_AS: case S_surfxml_AS_5: case S_surfxml_AS_6: SET(S_surfxml_AS_6); break;
   case S_surfxml_include: case S_surfxml_include_1: case S_surfxml_include_2: SET(S_surfxml_include_2); break;
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_5: case S_surfxml_platform_6: SET(S_surfxml_platform_6); break;
   case S_surfxml_zone: case S_surfxml_zone_13: case S_surfxml_zone_14: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
   case S_surfxml_zone_1: case S_surfxml_zone_5: case S_surfxml_zone_6: SET(S_surfxml_zone_6); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of include element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `include' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `include' element.");
}

<E_surfxml_include,S_surfxml_include,S_surfxml_include_2>{
 "</include"{s}">" {
  LEAVE;
  ETag_surfxml_include();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_13: case S_surfxml_AS_14: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_14); break;
   case S_surfxml_AS: case S_surfxml_AS_5: case S_surfxml_AS_6: SET(S_surfxml_AS_6); break;
   case S_surfxml_include: case S_surfxml_include_1: case S_surfxml_include_2: SET(S_surfxml_include_2); break;
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_5: case S_surfxml_platform_6: SET(S_surfxml_platform_6); break;
   case S_surfxml_zone: case S_surfxml_zone_13: case S_surfxml_zone_14: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
   case S_surfxml_zone_1: case S_surfxml_zone_5: case S_surfxml_zone_6: SET(S_surfxml_zone_6); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</include>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</include>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</include>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_4,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_4,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<link"{s} FAIL("Starting tag <link> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_3,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_3,S_surfxml_zone_5,S_surfxml_zone_6>"<link"{s} {
  AX_surfxml_link_bandwidth = 0;
  surfxml_link_bandwidth_isset = 0;
  AX_surfxml_link_bandwidth___file = 0;
  surfxml_link_bandwidth___file_isset = 0;
  AX_surfxml_link_id = 0;
  surfxml_link_id_isset = 0;
  AX_surfxml_link_latency = 0;
  surfxml_link_latency_isset = 0;
  AX_surfxml_link_latency___file = 0;
  surfxml_link_latency___file_isset = 0;
  AX_surfxml_link_sharing___policy = A_surfxml_link_sharing___policy_SHARED;
  surfxml_link_sharing___policy_isset = 0;
  AX_surfxml_link_state___file = 0;
  surfxml_link_state___file_isset = 0;
  ENTER(AL_surfxml_link); pushbuffer(0);
  }

<AL_surfxml_link>{
 "bandwidth"{Eq}\' if (surfxml_link_bandwidth_isset != 0) {FAIL("Multiple definition of attribute bandwidth in <surfxml_link>");} surfxml_link_bandwidth_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_link_bandwidth);
 "bandwidth"{Eq}\" if (surfxml_link_bandwidth_isset != 0) {FAIL("Multiple definition of attribute bandwidth in <surfxml_link>");}  surfxml_link_bandwidth_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_link_bandwidth);

 "bandwidth_file"{Eq}\' if (surfxml_link_bandwidth___file_isset != 0) {FAIL("Multiple definition of attribute bandwidth_file in <surfxml_link>");} surfxml_link_bandwidth___file_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_link_bandwidth___file);
 "bandwidth_file"{Eq}\" if (surfxml_link_bandwidth___file_isset != 0) {FAIL("Multiple definition of attribute bandwidth_file in <surfxml_link>");}  surfxml_link_bandwidth___file_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_link_bandwidth___file);

 "id"{Eq}\' if (surfxml_link_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_link>");} surfxml_link_id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_link_id);
 "id"{Eq}\" if (surfxml_link_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_link>");}  surfxml_link_id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_link_id);

 "latency"{Eq}\' if (surfxml_link_latency_isset != 0) {FAIL("Multiple definition of attribute latency in <surfxml_link>");} surfxml_link_latency_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_link_latency);
 "latency"{Eq}\" if (surfxml_link_latency_isset != 0) {FAIL("Multiple definition of attribute latency in <surfxml_link>");}  surfxml_link_latency_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_link_latency);

 "latency_file"{Eq}\' if (surfxml_link_latency___file_isset != 0) {FAIL("Multiple definition of attribute latency_file in <surfxml_link>");} surfxml_link_latency___file_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_link_latency___file);
 "latency_file"{Eq}\" if (surfxml_link_latency___file_isset != 0) {FAIL("Multiple definition of attribute latency_file in <surfxml_link>");}  surfxml_link_latency___file_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_link_latency___file);

 "sharing_policy"{Eq}"'SHARED'" |
 "sharing_policy"{Eq}"\"SHARED\"" A_surfxml_link_sharing___policy = A_surfxml_link_sharing___policy_SHARED;
 "sharing_policy"{Eq}"'SPLITDUPLEX'" |
 "sharing_policy"{Eq}"\"SPLITDUPLEX\"" A_surfxml_link_sharing___policy = A_surfxml_link_sharing___policy_SPLITDUPLEX;
 "sharing_policy"{Eq}"'FULLDUPLEX'" |
 "sharing_policy"{Eq}"\"FULLDUPLEX\"" A_surfxml_link_sharing___policy = A_surfxml_link_sharing___policy_FULLDUPLEX;
 "sharing_policy"{Eq}"'FATPIPE'" |
 "sharing_policy"{Eq}"\"FATPIPE\"" A_surfxml_link_sharing___policy = A_surfxml_link_sharing___policy_FATPIPE;

 "state_file"{Eq}\' if (surfxml_link_state___file_isset != 0) {FAIL("Multiple definition of attribute state_file in <surfxml_link>");} surfxml_link_state___file_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_link_state___file);
 "state_file"{Eq}\" if (surfxml_link_state___file_isset != 0) {FAIL("Multiple definition of attribute state_file in <surfxml_link>");}  surfxml_link_state___file_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_link_state___file);

 ">" {
  if (!AX_surfxml_link_bandwidth) FAIL("Required attribute `bandwidth' not set for `link' element.");
  if (!AX_surfxml_link_id) FAIL("Required attribute `id' not set for `link' element.");
  LEAVE; STag_surfxml_link();surfxml_pcdata_ix = 0; ENTER(S_surfxml_link);
 }
 "/>" {
  if (!AX_surfxml_link_bandwidth) FAIL("Required attribute `bandwidth' not set for `link' element.");
  if (!AX_surfxml_link_id) FAIL("Required attribute `id' not set for `link' element.");
  LEAVE; STag_surfxml_link(); surfxml_pcdata_ix = 0; ETag_surfxml_link(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_13: case S_surfxml_AS_14: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_14); break;
   case S_surfxml_AS: case S_surfxml_AS_5: case S_surfxml_AS_6: SET(S_surfxml_AS_6); break;
   case S_surfxml_zone: case S_surfxml_zone_13: case S_surfxml_zone_14: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
   case S_surfxml_zone_1: case S_surfxml_zone_5: case S_surfxml_zone_6: SET(S_surfxml_zone_6); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of link element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `link' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `link' element.");
}

<E_surfxml_link,S_surfxml_link,S_surfxml_link_2>{
 "</link"{s}">" {
  LEAVE;
  ETag_surfxml_link();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_13: case S_surfxml_AS_14: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_14); break;
   case S_surfxml_AS: case S_surfxml_AS_5: case S_surfxml_AS_6: SET(S_surfxml_AS_6); break;
   case S_surfxml_zone: case S_surfxml_zone_13: case S_surfxml_zone_14: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
   case S_surfxml_zone_1: case S_surfxml_zone_5: case S_surfxml_zone_6: SET(S_surfxml_zone_6); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</link>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</link>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</link>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_3,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<link_ctn"{s} FAIL("Starting tag <link_ctn> is not allowed here.");

<S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2>"<link_ctn"{s} {
  AX_surfxml_link___ctn_direction = A_surfxml_link___ctn_direction_NONE;
  surfxml_link___ctn_direction_isset = 0;
  AX_surfxml_link___ctn_id = 0;
  surfxml_link___ctn_id_isset = 0;
  ENTER(AL_surfxml_link___ctn); pushbuffer(0);
  }

<AL_surfxml_link___ctn>{
 "direction"{Eq}"'UP'" |
 "direction"{Eq}"\"UP\"" A_surfxml_link___ctn_direction = A_surfxml_link___ctn_direction_UP;
 "direction"{Eq}"'DOWN'" |
 "direction"{Eq}"\"DOWN\"" A_surfxml_link___ctn_direction = A_surfxml_link___ctn_direction_DOWN;
 "direction"{Eq}"'NONE'" |
 "direction"{Eq}"\"NONE\"" A_surfxml_link___ctn_direction = A_surfxml_link___ctn_direction_NONE;

 "id"{Eq}\' if (surfxml_link___ctn_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_link___ctn>");} surfxml_link___ctn_id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_link___ctn_id);
 "id"{Eq}\" if (surfxml_link___ctn_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_link___ctn>");}  surfxml_link___ctn_id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_link___ctn_id);

 ">" {
  if (!AX_surfxml_link___ctn_id) FAIL("Required attribute `id' not set for `link_ctn' element.");
  LEAVE; STag_surfxml_link___ctn();surfxml_pcdata_ix = 0; ENTER(E_surfxml_link___ctn);
 }
 "/>" {
  if (!AX_surfxml_link___ctn_id) FAIL("Required attribute `id' not set for `link_ctn' element.");
  LEAVE; STag_surfxml_link___ctn(); surfxml_pcdata_ix = 0; ETag_surfxml_link___ctn(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_ASroute: case S_surfxml_ASroute_1: case S_surfxml_ASroute_2: SET(S_surfxml_ASroute_2); break;
   case S_surfxml_bypassASroute: case S_surfxml_bypassASroute_1: case S_surfxml_bypassASroute_2: SET(S_surfxml_bypassASroute_2); break;
   case S_surfxml_bypassRoute: case S_surfxml_bypassRoute_1: case S_surfxml_bypassRoute_2: SET(S_surfxml_bypassRoute_2); break;
   case S_surfxml_bypassZoneRoute: case S_surfxml_bypassZoneRoute_1: case S_surfxml_bypassZoneRoute_2: SET(S_surfxml_bypassZoneRoute_2); break;
   case S_surfxml_route: case S_surfxml_route_1: case S_surfxml_route_2: SET(S_surfxml_route_2); break;
   case S_surfxml_zoneRoute: case S_surfxml_zoneRoute_1: case S_surfxml_zoneRoute_2: SET(S_surfxml_zoneRoute_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of link_ctn element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `link_ctn' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `link_ctn' element.");
}

<E_surfxml_link___ctn>{
 "</link_ctn"{s}">" {
  LEAVE;
  ETag_surfxml_link___ctn();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_ASroute: case S_surfxml_ASroute_1: case S_surfxml_ASroute_2: SET(S_surfxml_ASroute_2); break;
   case S_surfxml_bypassASroute: case S_surfxml_bypassASroute_1: case S_surfxml_bypassASroute_2: SET(S_surfxml_bypassASroute_2); break;
   case S_surfxml_bypassRoute: case S_surfxml_bypassRoute_1: case S_surfxml_bypassRoute_2: SET(S_surfxml_bypassRoute_2); break;
   case S_surfxml_bypassZoneRoute: case S_surfxml_bypassZoneRoute_1: case S_surfxml_bypassZoneRoute_2: SET(S_surfxml_bypassZoneRoute_2); break;
   case S_surfxml_route: case S_surfxml_route_1: case S_surfxml_route_2: SET(S_surfxml_route_2); break;
   case S_surfxml_zoneRoute: case S_surfxml_zoneRoute_1: case S_surfxml_zoneRoute_2: SET(S_surfxml_zoneRoute_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</link_ctn>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</link_ctn>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</link_ctn>' expected.");
}

 /* <!-- <!ATTLIST model_prop key CDATA #REQUIRED> -->
  * <!-- <!ATTLIST model_prop key CDATA #REQUIRED> -->  */

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_zone,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_1,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_3,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<model_prop"{s} FAIL("Starting tag <model_prop> is not allowed here.");

<S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2>"<model_prop"{s} {
  AX_surfxml_model___prop_id = 0;
  surfxml_model___prop_id_isset = 0;
  AX_surfxml_model___prop_value = 0;
  surfxml_model___prop_value_isset = 0;
  ENTER(AL_surfxml_model___prop); pushbuffer(0);
  }

<AL_surfxml_model___prop>{
 "id"{Eq}\' if (surfxml_model___prop_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_model___prop>");} surfxml_model___prop_id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_model___prop_id);
 "id"{Eq}\" if (surfxml_model___prop_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_model___prop>");}  surfxml_model___prop_id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_model___prop_id);

 "value"{Eq}\' if (surfxml_model___prop_value_isset != 0) {FAIL("Multiple definition of attribute value in <surfxml_model___prop>");} surfxml_model___prop_value_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_model___prop_value);
 "value"{Eq}\" if (surfxml_model___prop_value_isset != 0) {FAIL("Multiple definition of attribute value in <surfxml_model___prop>");}  surfxml_model___prop_value_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_model___prop_value);

 ">" {
  if (!AX_surfxml_model___prop_id) FAIL("Required attribute `id' not set for `model_prop' element.");
  if (!AX_surfxml_model___prop_value) FAIL("Required attribute `value' not set for `model_prop' element.");
  LEAVE; STag_surfxml_model___prop();surfxml_pcdata_ix = 0; ENTER(E_surfxml_model___prop);
 }
 "/>" {
  if (!AX_surfxml_model___prop_id) FAIL("Required attribute `id' not set for `model_prop' element.");
  if (!AX_surfxml_model___prop_value) FAIL("Required attribute `value' not set for `model_prop' element.");
  LEAVE; STag_surfxml_model___prop(); surfxml_pcdata_ix = 0; ETag_surfxml_model___prop(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_storage___type: case S_surfxml_storage___type_1: case S_surfxml_storage___type_2: SET(S_surfxml_storage___type_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of model_prop element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `model_prop' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `model_prop' element.");
}

<E_surfxml_model___prop>{
 "</model_prop"{s}">" {
  LEAVE;
  ETag_surfxml_model___prop();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_storage___type: case S_surfxml_storage___type_1: case S_surfxml_storage___type_2: SET(S_surfxml_storage___type_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</model_prop>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</model_prop>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</model_prop>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zone,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_1,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_3,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<mount"{s} FAIL("Starting tag <mount> is not allowed here.");

<S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2>"<mount"{s} {
  AX_surfxml_mount_name = 0;
  surfxml_mount_name_isset = 0;
  AX_surfxml_mount_storageId = 0;
  surfxml_mount_storageId_isset = 0;
  ENTER(AL_surfxml_mount); pushbuffer(0);
  }

<AL_surfxml_mount>{
 "name"{Eq}\' if (surfxml_mount_name_isset != 0) {FAIL("Multiple definition of attribute name in <surfxml_mount>");} surfxml_mount_name_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_mount_name);
 "name"{Eq}\" if (surfxml_mount_name_isset != 0) {FAIL("Multiple definition of attribute name in <surfxml_mount>");}  surfxml_mount_name_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_mount_name);

 "storageId"{Eq}\' if (surfxml_mount_storageId_isset != 0) {FAIL("Multiple definition of attribute storageId in <surfxml_mount>");} surfxml_mount_storageId_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_mount_storageId);
 "storageId"{Eq}\" if (surfxml_mount_storageId_isset != 0) {FAIL("Multiple definition of attribute storageId in <surfxml_mount>");}  surfxml_mount_storageId_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_mount_storageId);

 ">" {
  if (!AX_surfxml_mount_name) FAIL("Required attribute `name' not set for `mount' element.");
  if (!AX_surfxml_mount_storageId) FAIL("Required attribute `storageId' not set for `mount' element.");
  LEAVE; STag_surfxml_mount();surfxml_pcdata_ix = 0; ENTER(E_surfxml_mount);
 }
 "/>" {
  if (!AX_surfxml_mount_name) FAIL("Required attribute `name' not set for `mount' element.");
  if (!AX_surfxml_mount_storageId) FAIL("Required attribute `storageId' not set for `mount' element.");
  LEAVE; STag_surfxml_mount(); surfxml_pcdata_ix = 0; ETag_surfxml_mount(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_host: case S_surfxml_host_1: case S_surfxml_host_2: SET(S_surfxml_host_2); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of mount element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `mount' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `mount' element.");
}

<E_surfxml_mount>{
 "</mount"{s}">" {
  LEAVE;
  ETag_surfxml_mount();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_host: case S_surfxml_host_1: case S_surfxml_host_2: SET(S_surfxml_host_2); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</mount>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</mount>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</mount>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_4,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform_2,S_surfxml_platform_4,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_4,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<peer"{s} FAIL("Starting tag <peer> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_3,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_3,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_3,S_surfxml_zone_5,S_surfxml_zone_6>"<peer"{s} {
  AX_surfxml_peer_availability___file = 0;
  surfxml_peer_availability___file_isset = 0;
  AX_surfxml_peer_bw___in = 0;
  surfxml_peer_bw___in_isset = 0;
  AX_surfxml_peer_bw___out = 0;
  surfxml_peer_bw___out_isset = 0;
  AX_surfxml_peer_coordinates = 0;
  surfxml_peer_coordinates_isset = 0;
  AX_surfxml_peer_id = 0;
  surfxml_peer_id_isset = 0;
  AX_surfxml_peer_lat = 0;
  surfxml_peer_lat_isset = 0;
  AX_surfxml_peer_speed = 0;
  surfxml_peer_speed_isset = 0;
  AX_surfxml_peer_state___file = 0;
  surfxml_peer_state___file_isset = 0;
  ENTER(AL_surfxml_peer); pushbuffer(0);
  }

<AL_surfxml_peer>{
 "availability_file"{Eq}\' if (surfxml_peer_availability___file_isset != 0) {FAIL("Multiple definition of attribute availability_file in <surfxml_peer>");} surfxml_peer_availability___file_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_peer_availability___file);
 "availability_file"{Eq}\" if (surfxml_peer_availability___file_isset != 0) {FAIL("Multiple definition of attribute availability_file in <surfxml_peer>");}  surfxml_peer_availability___file_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_peer_availability___file);

 "bw_in"{Eq}\' if (surfxml_peer_bw___in_isset != 0) {FAIL("Multiple definition of attribute bw_in in <surfxml_peer>");} surfxml_peer_bw___in_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_peer_bw___in);
 "bw_in"{Eq}\" if (surfxml_peer_bw___in_isset != 0) {FAIL("Multiple definition of attribute bw_in in <surfxml_peer>");}  surfxml_peer_bw___in_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_peer_bw___in);

 "bw_out"{Eq}\' if (surfxml_peer_bw___out_isset != 0) {FAIL("Multiple definition of attribute bw_out in <surfxml_peer>");} surfxml_peer_bw___out_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_peer_bw___out);
 "bw_out"{Eq}\" if (surfxml_peer_bw___out_isset != 0) {FAIL("Multiple definition of attribute bw_out in <surfxml_peer>");}  surfxml_peer_bw___out_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_peer_bw___out);

 "coordinates"{Eq}\' if (surfxml_peer_coordinates_isset != 0) {FAIL("Multiple definition of attribute coordinates in <surfxml_peer>");} surfxml_peer_coordinates_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_peer_coordinates);
 "coordinates"{Eq}\" if (surfxml_peer_coordinates_isset != 0) {FAIL("Multiple definition of attribute coordinates in <surfxml_peer>");}  surfxml_peer_coordinates_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_peer_coordinates);

 "id"{Eq}\' if (surfxml_peer_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_peer>");} surfxml_peer_id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_peer_id);
 "id"{Eq}\" if (surfxml_peer_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_peer>");}  surfxml_peer_id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_peer_id);

 "lat"{Eq}\' if (surfxml_peer_lat_isset != 0) {FAIL("Multiple definition of attribute lat in <surfxml_peer>");} surfxml_peer_lat_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_peer_lat);
 "lat"{Eq}\" if (surfxml_peer_lat_isset != 0) {FAIL("Multiple definition of attribute lat in <surfxml_peer>");}  surfxml_peer_lat_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_peer_lat);

 "speed"{Eq}\' if (surfxml_peer_speed_isset != 0) {FAIL("Multiple definition of attribute speed in <surfxml_peer>");} surfxml_peer_speed_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_peer_speed);
 "speed"{Eq}\" if (surfxml_peer_speed_isset != 0) {FAIL("Multiple definition of attribute speed in <surfxml_peer>");}  surfxml_peer_speed_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_peer_speed);

 "state_file"{Eq}\' if (surfxml_peer_state___file_isset != 0) {FAIL("Multiple definition of attribute state_file in <surfxml_peer>");} surfxml_peer_state___file_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_peer_state___file);
 "state_file"{Eq}\" if (surfxml_peer_state___file_isset != 0) {FAIL("Multiple definition of attribute state_file in <surfxml_peer>");}  surfxml_peer_state___file_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_peer_state___file);

 ">" {
  if (!AX_surfxml_peer_bw___in) FAIL("Required attribute `bw_in' not set for `peer' element.");
  if (!AX_surfxml_peer_bw___out) FAIL("Required attribute `bw_out' not set for `peer' element.");
  if (!AX_surfxml_peer_id) FAIL("Required attribute `id' not set for `peer' element.");
  if (!AX_surfxml_peer_speed) FAIL("Required attribute `speed' not set for `peer' element.");
  LEAVE; STag_surfxml_peer();surfxml_pcdata_ix = 0; ENTER(E_surfxml_peer);
 }
 "/>" {
  if (!AX_surfxml_peer_bw___in) FAIL("Required attribute `bw_in' not set for `peer' element.");
  if (!AX_surfxml_peer_bw___out) FAIL("Required attribute `bw_out' not set for `peer' element.");
  if (!AX_surfxml_peer_id) FAIL("Required attribute `id' not set for `peer' element.");
  if (!AX_surfxml_peer_speed) FAIL("Required attribute `speed' not set for `peer' element.");
  LEAVE; STag_surfxml_peer(); surfxml_pcdata_ix = 0; ETag_surfxml_peer(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_5: case S_surfxml_AS_6: SET(S_surfxml_AS_6); break;
   case S_surfxml_include: case S_surfxml_include_1: case S_surfxml_include_2: SET(S_surfxml_include_2); break;
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_5: case S_surfxml_platform_6: SET(S_surfxml_platform_6); break;
   case S_surfxml_zone: case S_surfxml_zone_1: case S_surfxml_zone_3: case S_surfxml_zone_5: case S_surfxml_zone_6: SET(S_surfxml_zone_6); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of peer element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `peer' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `peer' element.");
}

<E_surfxml_peer>{
 "</peer"{s}">" {
  LEAVE;
  ETag_surfxml_peer();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_5: case S_surfxml_AS_6: SET(S_surfxml_AS_6); break;
   case S_surfxml_include: case S_surfxml_include_1: case S_surfxml_include_2: SET(S_surfxml_include_2); break;
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_5: case S_surfxml_platform_6: SET(S_surfxml_platform_6); break;
   case S_surfxml_zone: case S_surfxml_zone_1: case S_surfxml_zone_3: case S_surfxml_zone_5: case S_surfxml_zone_6: SET(S_surfxml_zone_6); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</peer>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</peer>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</peer>' expected.");
}

 /* <!--
  *              DTD of SimGrid platform and deployment files.
  * More info: http://simgrid.gforge.inria.fr/simgrid/latest/doc/platform.html
  * To upgrade your files, use the tool simgrid_update_xml
  * * Things that will change in upcoming version 5 (TODO):
  *   - The following tags will be removed:
  *     - <include> spits an error since v3.18
  *     - <random> does nothing since a very long time
  *     - <as>, <asroute>, <bypassZoneRoute> and <process>, deprecated in DTD4.1
  *   - FULLDUPLEX sharing will be removed, deprecated in DTD4.2 (v3.19)
  * * New in DTD version 4.2 (in SimGrid 3.19): backward compatible change (v4 files are valid v4.2 files)
  *    - SPLITDUPLEX is the new spelling of the deprecated FULLDUPLEX
  * * New in DTD version 4.1 (in SimGrid 3.16): backward compatible change (v4 files are valid v4.1 files)
  *    - <zone> can be used as a synonym for the now deprecated <as>
  *    - <zoneRoute> can be used as a synonym for the now deprecated <asroute>
  *    - <bypassZoneRoute> an be used as a synonym for the now deprecated <bypassAsRoute>
  *    - <actor> can be used as a synonym for the now deprecated <process>
  * * New in DTD version 4 (in SimGrid 3.13):
  *    - Rename (power->speed) the attributes describing the amount of flop
  *      that a <host>, <peer>, <cluster> or <cabinet> can deliver per second.
  *    - In <trace_connect>, attribute kind="POWER" is now kind="SPEED".
  *    - In <host> and <link>, attributes availability and state are gone.
  *      It was redundent with state and availability traces, and with peak values.
  *    - In <cluster>, cannot set the availability nor state traces.
  *      This was too complex and unused.
  *    - The DOCTYPE points to the right URL (this file):
  *      http://simgrid.gforge.inria.fr/simgrid/simgrid.dtd
  *    - Kill <gpu>. Was not doing anything.
  *    - A warning is emitted for unit-less values (they are still accepted).
  *      The value 0 can remain unit-less, as its unit does not matter.
  *      - speed. Default: 'f' or 'flops'. Also defined:
  *         'Yf',         'Zf',         'Ef',       'Pf',        'Tf',        'Gf',        'Mf',        'kf'
  *         'yottaflops', 'zettaflops', 'exaflops', 'petaflops', 'teraflops', 'gigaflops', 'megaflops', 'kiloflops'
  *      - bandwidth. Default: 'Bps' bytes per second
  *        In bytes and powers of 2  (1 KiBps = 1024 Bps): 'EiBps', 'PiBps', 'TiBps', 'GiBps', 'MiBps', 'KiBps'
  *        In bits  and powers of 2  (1 Bps = 8 bps)     : 'Eibps', 'Pibps', 'Tibps', 'Gibps', 'Mibps', 'Kibps'
  *        In bytes and powers of 10 (1 KBps = 1000 Bps) : 'EBps', 'PBps', 'TBps', 'GBps', 'MBps', 'kBps', 'Bps'
  *        In bits  and powers of 10                     : 'Ebps', 'Pbps', 'Tbps', 'Gbps', 'Mbps', 'kbps', 'bps'
  *        (Exa and Peta notations were introduced in SimGrid v3.14)
  *      - latency. Default: 's' second. Also defined:
  *        'w' week, 'd' day, 'h' hour, 'm' minute, 'ms' millisecond, 'us' microsecond, 'ns' nanosecond, 'ps' picosecond
  * * New in DTD version 3 (in SimGrid 3.5):
  *    - The AS tag were introduced. Every platform should now
  *      contain an englobing AS tag.
  *    - Routes are now symmetric by default.
  *    - Renamed tags (for sake of XML sanity):
  *      - LINK:CTN -> LINK_CTN
  *      - TRACE:CONNECT -> TRACE_CONNECT
  * * New in DTD version 2 (in SimGrid 3.4):
  *    - Renamed tags:
  *      - CPU -> HOST
  *      - NETWORK_LINK -> LINK
  *      - ROUTE_ELEMENT ->  LINK:CTN (changed again in v3)
  *      - PLATFORM_DESCRIPTION -> PLATFORM
  * * New in DTD version 1 (in SimGrid 3.3):
  *    - DTD is now versionned with the version attribute of platform
  *    - Unit change:
  *      - Link bandwidth: from Mb/s to b/s
  *      - CPU speed: from MFlop/s to Flop/s
  * -->  */

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zone,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_1,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_3,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<platform"{s} FAIL("Starting tag <platform> is not allowed here.");

<ROOT_surfxml_platform>"<platform"{s} {
  AX_surfxml_platform_version = 1;
  surfxml_platform_version_isset = 0;
  ENTER(AL_surfxml_platform); pushbuffer(0);
  }

<AL_surfxml_platform>{
 "version"{Eq}\' if (surfxml_platform_version_isset != 0) {FAIL("Multiple definition of attribute version in <surfxml_platform>");} surfxml_platform_version_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_platform_version);
 "version"{Eq}\" if (surfxml_platform_version_isset != 0) {FAIL("Multiple definition of attribute version in <surfxml_platform>");}  surfxml_platform_version_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_platform_version);

 ">" {
  LEAVE; STag_surfxml_platform();surfxml_pcdata_ix = 0; ENTER(S_surfxml_platform);
 }
 "/>" {
  LEAVE; STag_surfxml_platform(); surfxml_pcdata_ix = 0; ETag_surfxml_platform(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_surfxml_platform: SET(EPILOG); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of platform element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `platform' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `platform' element.");
}

<E_surfxml_platform,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_6,S_surfxml_platform_8>{
 "</platform"{s}">" {
  LEAVE;
  ETag_surfxml_platform();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_surfxml_platform: SET(EPILOG); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</platform>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</platform>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</platform>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform_2,S_surfxml_platform_5,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zone,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_1,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_3,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<process"{s} FAIL("Starting tag <process> is not allowed here.");

<S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8>"<process"{s} {
  AX_surfxml_process_function = 0;
  surfxml_process_function_isset = 0;
  AX_surfxml_process_host = 0;
  surfxml_process_host_isset = 0;
  AX_surfxml_process_kill___time = 36;
  surfxml_process_kill___time_isset = 0;
  AX_surfxml_process_on___failure = A_surfxml_process_on___failure_DIE;
  surfxml_process_on___failure_isset = 0;
  AX_surfxml_process_start___time = 31;
  surfxml_process_start___time_isset = 0;
  ENTER(AL_surfxml_process); pushbuffer(0);
  }

<AL_surfxml_process>{
 "function"{Eq}\' if (surfxml_process_function_isset != 0) {FAIL("Multiple definition of attribute function in <surfxml_process>");} surfxml_process_function_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_process_function);
 "function"{Eq}\" if (surfxml_process_function_isset != 0) {FAIL("Multiple definition of attribute function in <surfxml_process>");}  surfxml_process_function_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_process_function);

 "host"{Eq}\' if (surfxml_process_host_isset != 0) {FAIL("Multiple definition of attribute host in <surfxml_process>");} surfxml_process_host_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_process_host);
 "host"{Eq}\" if (surfxml_process_host_isset != 0) {FAIL("Multiple definition of attribute host in <surfxml_process>");}  surfxml_process_host_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_process_host);

 "kill_time"{Eq}\' if (surfxml_process_kill___time_isset != 0) {FAIL("Multiple definition of attribute kill_time in <surfxml_process>");} surfxml_process_kill___time_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_process_kill___time);
 "kill_time"{Eq}\" if (surfxml_process_kill___time_isset != 0) {FAIL("Multiple definition of attribute kill_time in <surfxml_process>");}  surfxml_process_kill___time_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_process_kill___time);

 "on_failure"{Eq}"'DIE'" |
 "on_failure"{Eq}"\"DIE\"" A_surfxml_process_on___failure = A_surfxml_process_on___failure_DIE;
 "on_failure"{Eq}"'RESTART'" |
 "on_failure"{Eq}"\"RESTART\"" A_surfxml_process_on___failure = A_surfxml_process_on___failure_RESTART;

 "start_time"{Eq}\' if (surfxml_process_start___time_isset != 0) {FAIL("Multiple definition of attribute start_time in <surfxml_process>");} surfxml_process_start___time_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_process_start___time);
 "start_time"{Eq}\" if (surfxml_process_start___time_isset != 0) {FAIL("Multiple definition of attribute start_time in <surfxml_process>");}  surfxml_process_start___time_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_process_start___time);

 ">" {
  if (!AX_surfxml_process_function) FAIL("Required attribute `function' not set for `process' element.");
  if (!AX_surfxml_process_host) FAIL("Required attribute `host' not set for `process' element.");
  LEAVE; STag_surfxml_process();surfxml_pcdata_ix = 0; ENTER(S_surfxml_process);
 }
 "/>" {
  if (!AX_surfxml_process_function) FAIL("Required attribute `function' not set for `process' element.");
  if (!AX_surfxml_process_host) FAIL("Required attribute `host' not set for `process' element.");
  LEAVE; STag_surfxml_process(); surfxml_pcdata_ix = 0; ETag_surfxml_process(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_4: case S_surfxml_platform_6: case S_surfxml_platform_7: case S_surfxml_platform_8: SET(S_surfxml_platform_8); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of process element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `process' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `process' element.");
}

<E_surfxml_process,S_surfxml_process,S_surfxml_process_2>{
 "</process"{s}">" {
  LEAVE;
  ETag_surfxml_process();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_4: case S_surfxml_platform_6: case S_surfxml_platform_7: case S_surfxml_platform_8: SET(S_surfxml_platform_8); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</process>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</process>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</process>' expected.");
}

 /* <!-- <!ATTLIST prop key CDATA #REQUIRED> -->
  * <!-- <!ATTLIST prop key CDATA #REQUIRED> -->  */

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_1,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_1,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<prop"{s} FAIL("Starting tag <prop> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_2,S_surfxml_AS_3,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zone,S_surfxml_zone_2,S_surfxml_zone_3>"<prop"{s} {
  AX_surfxml_prop_id = 0;
  surfxml_prop_id_isset = 0;
  AX_surfxml_prop_value = 0;
  surfxml_prop_value_isset = 0;
  ENTER(AL_surfxml_prop); pushbuffer(0);
  }

<AL_surfxml_prop>{
 "id"{Eq}\' if (surfxml_prop_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_prop>");} surfxml_prop_id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_prop_id);
 "id"{Eq}\" if (surfxml_prop_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_prop>");}  surfxml_prop_id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_prop_id);

 "value"{Eq}\' if (surfxml_prop_value_isset != 0) {FAIL("Multiple definition of attribute value in <surfxml_prop>");} surfxml_prop_value_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_prop_value);
 "value"{Eq}\" if (surfxml_prop_value_isset != 0) {FAIL("Multiple definition of attribute value in <surfxml_prop>");}  surfxml_prop_value_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_prop_value);

 ">" {
  if (!AX_surfxml_prop_id) FAIL("Required attribute `id' not set for `prop' element.");
  if (!AX_surfxml_prop_value) FAIL("Required attribute `value' not set for `prop' element.");
  LEAVE; STag_surfxml_prop();surfxml_pcdata_ix = 0; ENTER(E_surfxml_prop);
 }
 "/>" {
  if (!AX_surfxml_prop_id) FAIL("Required attribute `id' not set for `prop' element.");
  if (!AX_surfxml_prop_value) FAIL("Required attribute `value' not set for `prop' element.");
  LEAVE; STag_surfxml_prop(); surfxml_pcdata_ix = 0; ETag_surfxml_prop(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_2: case S_surfxml_AS_3: SET(S_surfxml_AS_3); break;
   case S_surfxml_actor: case S_surfxml_actor_1: case S_surfxml_actor_2: SET(S_surfxml_actor_2); break;
   case S_surfxml_cluster: case S_surfxml_cluster_1: case S_surfxml_cluster_2: SET(S_surfxml_cluster_2); break;
   case S_surfxml_config: case S_surfxml_config_1: case S_surfxml_config_2: SET(S_surfxml_config_2); break;
   case S_surfxml_host: case S_surfxml_host_1: case S_surfxml_host_2: SET(S_surfxml_host_2); break;
   case S_surfxml_link: case S_surfxml_link_1: case S_surfxml_link_2: SET(S_surfxml_link_2); break;
   case S_surfxml_process: case S_surfxml_process_1: case S_surfxml_process_2: SET(S_surfxml_process_2); break;
   case S_surfxml_storage: case S_surfxml_storage_1: case S_surfxml_storage_2: SET(S_surfxml_storage_2); break;
   case S_surfxml_storage___type: case S_surfxml_storage___type_1: case S_surfxml_storage___type_2: SET(S_surfxml_storage___type_2); break;
   case S_surfxml_zone: case S_surfxml_zone_2: case S_surfxml_zone_3: SET(S_surfxml_zone_3); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of prop element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `prop' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `prop' element.");
}

<E_surfxml_prop>{
 "</prop"{s}">" {
  LEAVE;
  ETag_surfxml_prop();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_2: case S_surfxml_AS_3: SET(S_surfxml_AS_3); break;
   case S_surfxml_actor: case S_surfxml_actor_1: case S_surfxml_actor_2: SET(S_surfxml_actor_2); break;
   case S_surfxml_cluster: case S_surfxml_cluster_1: case S_surfxml_cluster_2: SET(S_surfxml_cluster_2); break;
   case S_surfxml_config: case S_surfxml_config_1: case S_surfxml_config_2: SET(S_surfxml_config_2); break;
   case S_surfxml_host: case S_surfxml_host_1: case S_surfxml_host_2: SET(S_surfxml_host_2); break;
   case S_surfxml_link: case S_surfxml_link_1: case S_surfxml_link_2: SET(S_surfxml_link_2); break;
   case S_surfxml_process: case S_surfxml_process_1: case S_surfxml_process_2: SET(S_surfxml_process_2); break;
   case S_surfxml_storage: case S_surfxml_storage_1: case S_surfxml_storage_2: SET(S_surfxml_storage_2); break;
   case S_surfxml_storage___type: case S_surfxml_storage___type_1: case S_surfxml_storage___type_2: SET(S_surfxml_storage___type_2); break;
   case S_surfxml_zone: case S_surfxml_zone_2: case S_surfxml_zone_3: SET(S_surfxml_zone_3); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</prop>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</prop>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</prop>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform_1,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zone,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_1,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_3,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<random"{s} FAIL("Starting tag <random> is not allowed here.");

<S_surfxml_platform,S_surfxml_platform_2,S_surfxml_platform_3>"<random"{s} {
  AX_surfxml_random_generator = A_surfxml_random_generator_DRAND48;
  surfxml_random_generator_isset = 0;
  AX_surfxml_random_id = 0;
  surfxml_random_id_isset = 0;
  AX_surfxml_random_max = 0;
  surfxml_random_max_isset = 0;
  AX_surfxml_random_mean = 0;
  surfxml_random_mean_isset = 0;
  AX_surfxml_random_min = 0;
  surfxml_random_min_isset = 0;
  AX_surfxml_random_radical = 0;
  surfxml_random_radical_isset = 0;
  AX_surfxml_random_seed = 5;
  surfxml_random_seed_isset = 0;
  AX_surfxml_random_std___deviation = 0;
  surfxml_random_std___deviation_isset = 0;
  ENTER(AL_surfxml_random); pushbuffer(0);
  }

<AL_surfxml_random>{
 "generator"{Eq}"'DRAND48'" |
 "generator"{Eq}"\"DRAND48\"" A_surfxml_random_generator = A_surfxml_random_generator_DRAND48;
 "generator"{Eq}"'RAND'" |
 "generator"{Eq}"\"RAND\"" A_surfxml_random_generator = A_surfxml_random_generator_RAND;
 "generator"{Eq}"'RNGSTREAM'" |
 "generator"{Eq}"\"RNGSTREAM\"" A_surfxml_random_generator = A_surfxml_random_generator_RNGSTREAM;
 "generator"{Eq}"'NONE'" |
 "generator"{Eq}"\"NONE\"" A_surfxml_random_generator = A_surfxml_random_generator_NONE;

 "id"{Eq}\' if (surfxml_random_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_random>");} surfxml_random_id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_random_id);
 "id"{Eq}\" if (surfxml_random_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_random>");}  surfxml_random_id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_random_id);

 "max"{Eq}\' if (surfxml_random_max_isset != 0) {FAIL("Multiple definition of attribute max in <surfxml_random>");} surfxml_random_max_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_random_max);
 "max"{Eq}\" if (surfxml_random_max_isset != 0) {FAIL("Multiple definition of attribute max in <surfxml_random>");}  surfxml_random_max_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_random_max);

 "mean"{Eq}\' if (surfxml_random_mean_isset != 0) {FAIL("Multiple definition of attribute mean in <surfxml_random>");} surfxml_random_mean_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_random_mean);
 "mean"{Eq}\" if (surfxml_random_mean_isset != 0) {FAIL("Multiple definition of attribute mean in <surfxml_random>");}  surfxml_random_mean_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_random_mean);

 "min"{Eq}\' if (surfxml_random_min_isset != 0) {FAIL("Multiple definition of attribute min in <surfxml_random>");} surfxml_random_min_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_random_min);
 "min"{Eq}\" if (surfxml_random_min_isset != 0) {FAIL("Multiple definition of attribute min in <surfxml_random>");}  surfxml_random_min_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_random_min);

 "radical"{Eq}\' if (surfxml_random_radical_isset != 0) {FAIL("Multiple definition of attribute radical in <surfxml_random>");} surfxml_random_radical_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_random_radical);
 "radical"{Eq}\" if (surfxml_random_radical_isset != 0) {FAIL("Multiple definition of attribute radical in <surfxml_random>");}  surfxml_random_radical_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_random_radical);

 "seed"{Eq}\' if (surfxml_random_seed_isset != 0) {FAIL("Multiple definition of attribute seed in <surfxml_random>");} surfxml_random_seed_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_random_seed);
 "seed"{Eq}\" if (surfxml_random_seed_isset != 0) {FAIL("Multiple definition of attribute seed in <surfxml_random>");}  surfxml_random_seed_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_random_seed);

 "std_deviation"{Eq}\' if (surfxml_random_std___deviation_isset != 0) {FAIL("Multiple definition of attribute std_deviation in <surfxml_random>");} surfxml_random_std___deviation_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_random_std___deviation);
 "std_deviation"{Eq}\" if (surfxml_random_std___deviation_isset != 0) {FAIL("Multiple definition of attribute std_deviation in <surfxml_random>");}  surfxml_random_std___deviation_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_random_std___deviation);

 ">" {
  if (!AX_surfxml_random_id) FAIL("Required attribute `id' not set for `random' element.");
  if (!AX_surfxml_random_max) FAIL("Required attribute `max' not set for `random' element.");
  if (!AX_surfxml_random_mean) FAIL("Required attribute `mean' not set for `random' element.");
  if (!AX_surfxml_random_min) FAIL("Required attribute `min' not set for `random' element.");
  if (!AX_surfxml_random_std___deviation) FAIL("Required attribute `std_deviation' not set for `random' element.");
  LEAVE; STag_surfxml_random();surfxml_pcdata_ix = 0; ENTER(E_surfxml_random);
 }
 "/>" {
  if (!AX_surfxml_random_id) FAIL("Required attribute `id' not set for `random' element.");
  if (!AX_surfxml_random_max) FAIL("Required attribute `max' not set for `random' element.");
  if (!AX_surfxml_random_mean) FAIL("Required attribute `mean' not set for `random' element.");
  if (!AX_surfxml_random_min) FAIL("Required attribute `min' not set for `random' element.");
  if (!AX_surfxml_random_std___deviation) FAIL("Required attribute `std_deviation' not set for `random' element.");
  LEAVE; STag_surfxml_random(); surfxml_pcdata_ix = 0; ETag_surfxml_random(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_platform: case S_surfxml_platform_2: case S_surfxml_platform_3: SET(S_surfxml_platform_3); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of random element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `random' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `random' element.");
}

<E_surfxml_random>{
 "</random"{s}">" {
  LEAVE;
  ETag_surfxml_random();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_platform: case S_surfxml_platform_2: case S_surfxml_platform_3: SET(S_surfxml_platform_3); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</random>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</random>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</random>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_13,S_surfxml_AS_2,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_13,S_surfxml_zone_2,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<route"{s} FAIL("Starting tag <route> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_12,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_3,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_12,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_3>"<route"{s} {
  AX_surfxml_route_dst = 0;
  surfxml_route_dst_isset = 0;
  AX_surfxml_route_src = 0;
  surfxml_route_src_isset = 0;
  AX_surfxml_route_symmetrical = A_surfxml_route_symmetrical_YES;
  surfxml_route_symmetrical_isset = 0;
  ENTER(AL_surfxml_route); pushbuffer(0);
  }

<AL_surfxml_route>{
 "dst"{Eq}\' if (surfxml_route_dst_isset != 0) {FAIL("Multiple definition of attribute dst in <surfxml_route>");} surfxml_route_dst_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_route_dst);
 "dst"{Eq}\" if (surfxml_route_dst_isset != 0) {FAIL("Multiple definition of attribute dst in <surfxml_route>");}  surfxml_route_dst_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_route_dst);

 "src"{Eq}\' if (surfxml_route_src_isset != 0) {FAIL("Multiple definition of attribute src in <surfxml_route>");} surfxml_route_src_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_route_src);
 "src"{Eq}\" if (surfxml_route_src_isset != 0) {FAIL("Multiple definition of attribute src in <surfxml_route>");}  surfxml_route_src_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_route_src);

 "symmetrical"{Eq}"'YES'" |
 "symmetrical"{Eq}"\"YES\"" A_surfxml_route_symmetrical = A_surfxml_route_symmetrical_YES;
 "symmetrical"{Eq}"'NO'" |
 "symmetrical"{Eq}"\"NO\"" A_surfxml_route_symmetrical = A_surfxml_route_symmetrical_NO;
 "symmetrical"{Eq}"'yes'" |
 "symmetrical"{Eq}"\"yes\"" A_surfxml_route_symmetrical = A_surfxml_route_symmetrical_yes;
 "symmetrical"{Eq}"'no'" |
 "symmetrical"{Eq}"\"no\"" A_surfxml_route_symmetrical = A_surfxml_route_symmetrical_no;

 ">" {
  if (!AX_surfxml_route_dst) FAIL("Required attribute `dst' not set for `route' element.");
  if (!AX_surfxml_route_src) FAIL("Required attribute `src' not set for `route' element.");
  LEAVE; STag_surfxml_route();surfxml_pcdata_ix = 0; ENTER(S_surfxml_route);
 }
 "/>" {
  if (!AX_surfxml_route_dst) FAIL("Required attribute `dst' not set for `route' element.");
  if (!AX_surfxml_route_src) FAIL("Required attribute `src' not set for `route' element.");
  LEAVE; STag_surfxml_route(); surfxml_pcdata_ix = 0; ETag_surfxml_route(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_12: case S_surfxml_AS_14: case S_surfxml_AS_15: case S_surfxml_AS_16: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_16); break;
   case S_surfxml_zone: case S_surfxml_zone_12: case S_surfxml_zone_14: case S_surfxml_zone_15: case S_surfxml_zone_16: case S_surfxml_zone_1: case S_surfxml_zone_3: SET(S_surfxml_zone_16); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of route element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `route' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `route' element.");
}

<E_surfxml_route,S_surfxml_route,S_surfxml_route_2>{
 "</route"{s}">" {
  LEAVE;
  ETag_surfxml_route();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_12: case S_surfxml_AS_14: case S_surfxml_AS_15: case S_surfxml_AS_16: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_16); break;
   case S_surfxml_zone: case S_surfxml_zone_12: case S_surfxml_zone_14: case S_surfxml_zone_15: case S_surfxml_zone_16: case S_surfxml_zone_1: case S_surfxml_zone_3: SET(S_surfxml_zone_16); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</route>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</route>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</route>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<router"{s} FAIL("Starting tag <router> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_3,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_3>"<router"{s} {
  AX_surfxml_router_coordinates = 0;
  surfxml_router_coordinates_isset = 0;
  AX_surfxml_router_id = 0;
  surfxml_router_id_isset = 0;
  ENTER(AL_surfxml_router); pushbuffer(0);
  }

<AL_surfxml_router>{
 "coordinates"{Eq}\' if (surfxml_router_coordinates_isset != 0) {FAIL("Multiple definition of attribute coordinates in <surfxml_router>");} surfxml_router_coordinates_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_router_coordinates);
 "coordinates"{Eq}\" if (surfxml_router_coordinates_isset != 0) {FAIL("Multiple definition of attribute coordinates in <surfxml_router>");}  surfxml_router_coordinates_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_router_coordinates);

 "id"{Eq}\' if (surfxml_router_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_router>");} surfxml_router_id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_router_id);
 "id"{Eq}\" if (surfxml_router_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_router>");}  surfxml_router_id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_router_id);

 ">" {
  if (!AX_surfxml_router_id) FAIL("Required attribute `id' not set for `router' element.");
  LEAVE; STag_surfxml_router();surfxml_pcdata_ix = 0; ENTER(E_surfxml_router);
 }
 "/>" {
  if (!AX_surfxml_router_id) FAIL("Required attribute `id' not set for `router' element.");
  LEAVE; STag_surfxml_router(); surfxml_pcdata_ix = 0; ETag_surfxml_router(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_13: case S_surfxml_AS_14: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_14); break;
   case S_surfxml_zone: case S_surfxml_zone_13: case S_surfxml_zone_14: case S_surfxml_zone_1: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of router element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `router' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `router' element.");
}

<E_surfxml_router>{
 "</router"{s}">" {
  LEAVE;
  ETag_surfxml_router();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_13: case S_surfxml_AS_14: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_14); break;
   case S_surfxml_zone: case S_surfxml_zone_13: case S_surfxml_zone_14: case S_surfxml_zone_1: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</router>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</router>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</router>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<storage"{s} FAIL("Starting tag <storage> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_3,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_3>"<storage"{s} {
  AX_surfxml_storage_attach = 0;
  surfxml_storage_attach_isset = 0;
  AX_surfxml_storage_content = 0;
  surfxml_storage_content_isset = 0;
  AX_surfxml_storage_id = 0;
  surfxml_storage_id_isset = 0;
  AX_surfxml_storage_typeId = 0;
  surfxml_storage_typeId_isset = 0;
  ENTER(AL_surfxml_storage); pushbuffer(0);
  }

<AL_surfxml_storage>{
 "attach"{Eq}\' if (surfxml_storage_attach_isset != 0) {FAIL("Multiple definition of attribute attach in <surfxml_storage>");} surfxml_storage_attach_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_storage_attach);
 "attach"{Eq}\" if (surfxml_storage_attach_isset != 0) {FAIL("Multiple definition of attribute attach in <surfxml_storage>");}  surfxml_storage_attach_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_storage_attach);

 "content"{Eq}\' if (surfxml_storage_content_isset != 0) {FAIL("Multiple definition of attribute content in <surfxml_storage>");} surfxml_storage_content_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_storage_content);
 "content"{Eq}\" if (surfxml_storage_content_isset != 0) {FAIL("Multiple definition of attribute content in <surfxml_storage>");}  surfxml_storage_content_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_storage_content);

 "id"{Eq}\' if (surfxml_storage_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_storage>");} surfxml_storage_id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_storage_id);
 "id"{Eq}\" if (surfxml_storage_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_storage>");}  surfxml_storage_id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_storage_id);

 "typeId"{Eq}\' if (surfxml_storage_typeId_isset != 0) {FAIL("Multiple definition of attribute typeId in <surfxml_storage>");} surfxml_storage_typeId_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_storage_typeId);
 "typeId"{Eq}\" if (surfxml_storage_typeId_isset != 0) {FAIL("Multiple definition of attribute typeId in <surfxml_storage>");}  surfxml_storage_typeId_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_storage_typeId);

 ">" {
  if (!AX_surfxml_storage_attach) FAIL("Required attribute `attach' not set for `storage' element.");
  if (!AX_surfxml_storage_id) FAIL("Required attribute `id' not set for `storage' element.");
  if (!AX_surfxml_storage_typeId) FAIL("Required attribute `typeId' not set for `storage' element.");
  LEAVE; STag_surfxml_storage();surfxml_pcdata_ix = 0; ENTER(S_surfxml_storage);
 }
 "/>" {
  if (!AX_surfxml_storage_attach) FAIL("Required attribute `attach' not set for `storage' element.");
  if (!AX_surfxml_storage_id) FAIL("Required attribute `id' not set for `storage' element.");
  if (!AX_surfxml_storage_typeId) FAIL("Required attribute `typeId' not set for `storage' element.");
  LEAVE; STag_surfxml_storage(); surfxml_pcdata_ix = 0; ETag_surfxml_storage(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_13: case S_surfxml_AS_14: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_14); break;
   case S_surfxml_zone: case S_surfxml_zone_13: case S_surfxml_zone_14: case S_surfxml_zone_1: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of storage element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `storage' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `storage' element.");
}

<E_surfxml_storage,S_surfxml_storage,S_surfxml_storage_2>{
 "</storage"{s}">" {
  LEAVE;
  ETag_surfxml_storage();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_13: case S_surfxml_AS_14: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_14); break;
   case S_surfxml_zone: case S_surfxml_zone_13: case S_surfxml_zone_14: case S_surfxml_zone_1: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</storage>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</storage>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</storage>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<storage_type"{s} FAIL("Starting tag <storage_type> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_3,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_3>"<storage_type"{s} {
  AX_surfxml_storage___type_content = 0;
  surfxml_storage___type_content_isset = 0;
  AX_surfxml_storage___type_id = 0;
  surfxml_storage___type_id_isset = 0;
  AX_surfxml_storage___type_model = 16;
  surfxml_storage___type_model_isset = 0;
  AX_surfxml_storage___type_size = 0;
  surfxml_storage___type_size_isset = 0;
  ENTER(AL_surfxml_storage___type); pushbuffer(0);
  }

<AL_surfxml_storage___type>{
 "content"{Eq}\' if (surfxml_storage___type_content_isset != 0) {FAIL("Multiple definition of attribute content in <surfxml_storage___type>");} surfxml_storage___type_content_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_storage___type_content);
 "content"{Eq}\" if (surfxml_storage___type_content_isset != 0) {FAIL("Multiple definition of attribute content in <surfxml_storage___type>");}  surfxml_storage___type_content_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_storage___type_content);

 "id"{Eq}\' if (surfxml_storage___type_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_storage___type>");} surfxml_storage___type_id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_storage___type_id);
 "id"{Eq}\" if (surfxml_storage___type_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_storage___type>");}  surfxml_storage___type_id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_storage___type_id);

 "model"{Eq}\' if (surfxml_storage___type_model_isset != 0) {FAIL("Multiple definition of attribute model in <surfxml_storage___type>");} surfxml_storage___type_model_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_storage___type_model);
 "model"{Eq}\" if (surfxml_storage___type_model_isset != 0) {FAIL("Multiple definition of attribute model in <surfxml_storage___type>");}  surfxml_storage___type_model_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_storage___type_model);

 "size"{Eq}\' if (surfxml_storage___type_size_isset != 0) {FAIL("Multiple definition of attribute size in <surfxml_storage___type>");} surfxml_storage___type_size_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_storage___type_size);
 "size"{Eq}\" if (surfxml_storage___type_size_isset != 0) {FAIL("Multiple definition of attribute size in <surfxml_storage___type>");}  surfxml_storage___type_size_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_storage___type_size);

 ">" {
  if (!AX_surfxml_storage___type_id) FAIL("Required attribute `id' not set for `storage_type' element.");
  if (!AX_surfxml_storage___type_size) FAIL("Required attribute `size' not set for `storage_type' element.");
  LEAVE; STag_surfxml_storage___type();surfxml_pcdata_ix = 0; ENTER(S_surfxml_storage___type);
 }
 "/>" {
  if (!AX_surfxml_storage___type_id) FAIL("Required attribute `id' not set for `storage_type' element.");
  if (!AX_surfxml_storage___type_size) FAIL("Required attribute `size' not set for `storage_type' element.");
  LEAVE; STag_surfxml_storage___type(); surfxml_pcdata_ix = 0; ETag_surfxml_storage___type(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_13: case S_surfxml_AS_14: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_14); break;
   case S_surfxml_zone: case S_surfxml_zone_13: case S_surfxml_zone_14: case S_surfxml_zone_1: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of storage_type element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `storage_type' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `storage_type' element.");
}

<E_surfxml_storage___type,S_surfxml_storage___type,S_surfxml_storage___type_2>{
 "</storage_type"{s}">" {
  LEAVE;
  ETag_surfxml_storage___type();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_13: case S_surfxml_AS_14: case S_surfxml_AS_1: case S_surfxml_AS_3: SET(S_surfxml_AS_14); break;
   case S_surfxml_zone: case S_surfxml_zone_13: case S_surfxml_zone_14: case S_surfxml_zone_1: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</storage_type>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</storage_type>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</storage_type>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_2,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform_2,S_surfxml_platform_4,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_2>"<trace"{s} FAIL("Starting tag <trace> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_3,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_3,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<trace"{s} {
  AX_surfxml_trace_file = 0;
  surfxml_trace_file_isset = 0;
  AX_surfxml_trace_id = 0;
  surfxml_trace_id_isset = 0;
  AX_surfxml_trace_periodicity = 0;
  surfxml_trace_periodicity_isset = 0;
  ENTER(AL_surfxml_trace); pushbuffer(0);
  }

<AL_surfxml_trace>{
 "file"{Eq}\' if (surfxml_trace_file_isset != 0) {FAIL("Multiple definition of attribute file in <surfxml_trace>");} surfxml_trace_file_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_trace_file);
 "file"{Eq}\" if (surfxml_trace_file_isset != 0) {FAIL("Multiple definition of attribute file in <surfxml_trace>");}  surfxml_trace_file_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_trace_file);

 "id"{Eq}\' if (surfxml_trace_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_trace>");} surfxml_trace_id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_trace_id);
 "id"{Eq}\" if (surfxml_trace_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_trace>");}  surfxml_trace_id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_trace_id);

 "periodicity"{Eq}\' if (surfxml_trace_periodicity_isset != 0) {FAIL("Multiple definition of attribute periodicity in <surfxml_trace>");} surfxml_trace_periodicity_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_trace_periodicity);
 "periodicity"{Eq}\" if (surfxml_trace_periodicity_isset != 0) {FAIL("Multiple definition of attribute periodicity in <surfxml_trace>");}  surfxml_trace_periodicity_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_trace_periodicity);

 ">" {
  if (!AX_surfxml_trace_id) FAIL("Required attribute `id' not set for `trace' element.");
  if (!AX_surfxml_trace_periodicity) FAIL("Required attribute `periodicity' not set for `trace' element.");
  LEAVE; STag_surfxml_trace();pushbuffer(surfxml_pcdata_ix); BUFFERSET(surfxml_pcdata_ix);; ENTER(IN_trace);
 }
 "/>" {
  if (!AX_surfxml_trace_id) FAIL("Required attribute `id' not set for `trace' element.");
  if (!AX_surfxml_trace_periodicity) FAIL("Required attribute `periodicity' not set for `trace' element.");
  LEAVE; STag_surfxml_trace(); surfxml_pcdata_ix = 0; ETag_surfxml_trace(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_10: case S_surfxml_AS_11: case S_surfxml_AS_4: case S_surfxml_AS_7: SET(S_surfxml_AS_11); break;
   case S_surfxml_AS_13: case S_surfxml_AS_14: SET(S_surfxml_AS_14); break;
   case S_surfxml_AS_12: case S_surfxml_AS_15: case S_surfxml_AS_16: SET(S_surfxml_AS_16); break;
   case S_surfxml_AS_5: SET(S_surfxml_AS_6); break;
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_6: case S_surfxml_AS_8: case S_surfxml_AS_9: SET(S_surfxml_AS_9); break;
   case S_surfxml_include: case S_surfxml_include_1: case S_surfxml_include_2: SET(S_surfxml_include_2); break;
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_5: case S_surfxml_platform_6: SET(S_surfxml_platform_6); break;
   case S_surfxml_zone_10: case S_surfxml_zone_11: case S_surfxml_zone_4: case S_surfxml_zone_6: case S_surfxml_zone_7: SET(S_surfxml_zone_11); break;
   case S_surfxml_zone_13: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
   case S_surfxml_zone: case S_surfxml_zone_12: case S_surfxml_zone_14: case S_surfxml_zone_15: case S_surfxml_zone_16: SET(S_surfxml_zone_16); break;
   case S_surfxml_zone_1: case S_surfxml_zone_5: SET(S_surfxml_zone_6); break;
   case S_surfxml_zone_8: case S_surfxml_zone_9: SET(S_surfxml_zone_9); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of trace element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `trace' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `trace' element.");
}

<IN_trace>{
 "</trace"{s}">" {
  LEAVE;
  BUFFERDONE;
  ETag_surfxml_trace();
  surfxml_pcdata_ix = popbuffer();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_10: case S_surfxml_AS_11: case S_surfxml_AS_4: case S_surfxml_AS_7: SET(S_surfxml_AS_11); break;
   case S_surfxml_AS_13: case S_surfxml_AS_14: SET(S_surfxml_AS_14); break;
   case S_surfxml_AS_12: case S_surfxml_AS_15: case S_surfxml_AS_16: SET(S_surfxml_AS_16); break;
   case S_surfxml_AS_5: SET(S_surfxml_AS_6); break;
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_6: case S_surfxml_AS_8: case S_surfxml_AS_9: SET(S_surfxml_AS_9); break;
   case S_surfxml_include: case S_surfxml_include_1: case S_surfxml_include_2: SET(S_surfxml_include_2); break;
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_5: case S_surfxml_platform_6: SET(S_surfxml_platform_6); break;
   case S_surfxml_zone_10: case S_surfxml_zone_11: case S_surfxml_zone_4: case S_surfxml_zone_6: case S_surfxml_zone_7: SET(S_surfxml_zone_11); break;
   case S_surfxml_zone_13: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
   case S_surfxml_zone: case S_surfxml_zone_12: case S_surfxml_zone_14: case S_surfxml_zone_15: case S_surfxml_zone_16: SET(S_surfxml_zone_16); break;
   case S_surfxml_zone_1: case S_surfxml_zone_5: SET(S_surfxml_zone_6); break;
   case S_surfxml_zone_8: case S_surfxml_zone_9: SET(S_surfxml_zone_9); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</trace>' expected.",yytext);
 <<EOF>> FAIL("Premature EOF: `</trace>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_2,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform_2,S_surfxml_platform_4,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_2>"<trace_connect"{s} FAIL("Starting tag <trace_connect> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_3,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_3,S_surfxml_zone_4,S_surfxml_zone_5,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<trace_connect"{s} {
  AX_surfxml_trace___connect_element = 0;
  surfxml_trace___connect_element_isset = 0;
  AX_surfxml_trace___connect_kind = A_surfxml_trace___connect_kind_HOST___AVAIL;
  surfxml_trace___connect_kind_isset = 0;
  AX_surfxml_trace___connect_trace = 0;
  surfxml_trace___connect_trace_isset = 0;
  ENTER(AL_surfxml_trace___connect); pushbuffer(0);
  }

<AL_surfxml_trace___connect>{
 "element"{Eq}\' if (surfxml_trace___connect_element_isset != 0) {FAIL("Multiple definition of attribute element in <surfxml_trace___connect>");} surfxml_trace___connect_element_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_trace___connect_element);
 "element"{Eq}\" if (surfxml_trace___connect_element_isset != 0) {FAIL("Multiple definition of attribute element in <surfxml_trace___connect>");}  surfxml_trace___connect_element_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_trace___connect_element);

 "kind"{Eq}"'HOST_AVAIL'" |
 "kind"{Eq}"\"HOST_AVAIL\"" A_surfxml_trace___connect_kind = A_surfxml_trace___connect_kind_HOST___AVAIL;
 "kind"{Eq}"'SPEED'" |
 "kind"{Eq}"\"SPEED\"" A_surfxml_trace___connect_kind = A_surfxml_trace___connect_kind_SPEED;
 "kind"{Eq}"'LINK_AVAIL'" |
 "kind"{Eq}"\"LINK_AVAIL\"" A_surfxml_trace___connect_kind = A_surfxml_trace___connect_kind_LINK___AVAIL;
 "kind"{Eq}"'BANDWIDTH'" |
 "kind"{Eq}"\"BANDWIDTH\"" A_surfxml_trace___connect_kind = A_surfxml_trace___connect_kind_BANDWIDTH;
 "kind"{Eq}"'LATENCY'" |
 "kind"{Eq}"\"LATENCY\"" A_surfxml_trace___connect_kind = A_surfxml_trace___connect_kind_LATENCY;

 "trace"{Eq}\' if (surfxml_trace___connect_trace_isset != 0) {FAIL("Multiple definition of attribute trace in <surfxml_trace___connect>");} surfxml_trace___connect_trace_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_trace___connect_trace);
 "trace"{Eq}\" if (surfxml_trace___connect_trace_isset != 0) {FAIL("Multiple definition of attribute trace in <surfxml_trace___connect>");}  surfxml_trace___connect_trace_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_trace___connect_trace);

 ">" {
  if (!AX_surfxml_trace___connect_element) FAIL("Required attribute `element' not set for `trace_connect' element.");
  if (!AX_surfxml_trace___connect_trace) FAIL("Required attribute `trace' not set for `trace_connect' element.");
  LEAVE; STag_surfxml_trace___connect();surfxml_pcdata_ix = 0; ENTER(E_surfxml_trace___connect);
 }
 "/>" {
  if (!AX_surfxml_trace___connect_element) FAIL("Required attribute `element' not set for `trace_connect' element.");
  if (!AX_surfxml_trace___connect_trace) FAIL("Required attribute `trace' not set for `trace_connect' element.");
  LEAVE; STag_surfxml_trace___connect(); surfxml_pcdata_ix = 0; ETag_surfxml_trace___connect(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_10: case S_surfxml_AS_11: case S_surfxml_AS_4: case S_surfxml_AS_7: SET(S_surfxml_AS_11); break;
   case S_surfxml_AS_13: case S_surfxml_AS_14: SET(S_surfxml_AS_14); break;
   case S_surfxml_AS_12: case S_surfxml_AS_15: case S_surfxml_AS_16: SET(S_surfxml_AS_16); break;
   case S_surfxml_AS_5: SET(S_surfxml_AS_6); break;
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_6: case S_surfxml_AS_8: case S_surfxml_AS_9: SET(S_surfxml_AS_9); break;
   case S_surfxml_include: case S_surfxml_include_1: case S_surfxml_include_2: SET(S_surfxml_include_2); break;
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_5: case S_surfxml_platform_6: SET(S_surfxml_platform_6); break;
   case S_surfxml_zone_10: case S_surfxml_zone_11: case S_surfxml_zone_4: case S_surfxml_zone_6: case S_surfxml_zone_7: SET(S_surfxml_zone_11); break;
   case S_surfxml_zone_13: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
   case S_surfxml_zone: case S_surfxml_zone_12: case S_surfxml_zone_14: case S_surfxml_zone_15: case S_surfxml_zone_16: SET(S_surfxml_zone_16); break;
   case S_surfxml_zone_1: case S_surfxml_zone_5: SET(S_surfxml_zone_6); break;
   case S_surfxml_zone_8: case S_surfxml_zone_9: SET(S_surfxml_zone_9); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of trace_connect element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `trace_connect' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `trace_connect' element.");
}

<E_surfxml_trace___connect>{
 "</trace_connect"{s}">" {
  LEAVE;
  ETag_surfxml_trace___connect();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS_10: case S_surfxml_AS_11: case S_surfxml_AS_4: case S_surfxml_AS_7: SET(S_surfxml_AS_11); break;
   case S_surfxml_AS_13: case S_surfxml_AS_14: SET(S_surfxml_AS_14); break;
   case S_surfxml_AS_12: case S_surfxml_AS_15: case S_surfxml_AS_16: SET(S_surfxml_AS_16); break;
   case S_surfxml_AS_5: SET(S_surfxml_AS_6); break;
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_6: case S_surfxml_AS_8: case S_surfxml_AS_9: SET(S_surfxml_AS_9); break;
   case S_surfxml_include: case S_surfxml_include_1: case S_surfxml_include_2: SET(S_surfxml_include_2); break;
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_5: case S_surfxml_platform_6: SET(S_surfxml_platform_6); break;
   case S_surfxml_zone_10: case S_surfxml_zone_11: case S_surfxml_zone_4: case S_surfxml_zone_6: case S_surfxml_zone_7: SET(S_surfxml_zone_11); break;
   case S_surfxml_zone_13: case S_surfxml_zone_3: SET(S_surfxml_zone_14); break;
   case S_surfxml_zone: case S_surfxml_zone_12: case S_surfxml_zone_14: case S_surfxml_zone_15: case S_surfxml_zone_16: SET(S_surfxml_zone_16); break;
   case S_surfxml_zone_1: case S_surfxml_zone_5: SET(S_surfxml_zone_6); break;
   case S_surfxml_zone_8: case S_surfxml_zone_9: SET(S_surfxml_zone_9); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</trace_connect>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</trace_connect>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</trace_connect>' expected.");
}

 /* <!-- A zone is either an internal node that contains other zones, 
  *      or a  leaf containing hosts and other leaf-like elements -->
  *           (((AS|zone|include|link|backbone|cabinet|cluster|peer|trace|trace_connect)*,
  *             (zoneRoute|ASroute|trace|trace_connect|bypassASroute|bypassZoneRoute)*,
  * 	    (trace|trace_connect)*)
  * 	   |((include|storage_type|storage|host|cabinet|router|link|backbone|trace|trace_connect|host_link)*,
  * 	     (route|trace|trace_connect|bypassRoute)*)))>  */

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_4,S_surfxml_AS_7,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform_2,S_surfxml_platform_4,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_4,S_surfxml_zone_7,S_surfxml_zone_8,S_surfxml_zone_9>"<zone"{s} FAIL("Starting tag <zone> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_3,S_surfxml_AS_5,S_surfxml_AS_6,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_3,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_3,S_surfxml_zone_5,S_surfxml_zone_6>"<zone"{s} {
  AX_surfxml_zone_id = 0;
  surfxml_zone_id_isset = 0;
  AX_surfxml_zone_routing = AU_surfxml_zone_routing;
  surfxml_zone_routing_isset = 0;
  ENTER(AL_surfxml_zone); pushbuffer(0);
  }

<AL_surfxml_zone>{
 "id"{Eq}\' if (surfxml_zone_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_zone>");} surfxml_zone_id_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_zone_id);
 "id"{Eq}\" if (surfxml_zone_id_isset != 0) {FAIL("Multiple definition of attribute id in <surfxml_zone>");}  surfxml_zone_id_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_zone_id);

 "routing"{Eq}"'Full'" |
 "routing"{Eq}"\"Full\"" A_surfxml_zone_routing = A_surfxml_zone_routing_Full;
 "routing"{Eq}"'Floyd'" |
 "routing"{Eq}"\"Floyd\"" A_surfxml_zone_routing = A_surfxml_zone_routing_Floyd;
 "routing"{Eq}"'Dijkstra'" |
 "routing"{Eq}"\"Dijkstra\"" A_surfxml_zone_routing = A_surfxml_zone_routing_Dijkstra;
 "routing"{Eq}"'DijkstraCache'" |
 "routing"{Eq}"\"DijkstraCache\"" A_surfxml_zone_routing = A_surfxml_zone_routing_DijkstraCache;
 "routing"{Eq}"'None'" |
 "routing"{Eq}"\"None\"" A_surfxml_zone_routing = A_surfxml_zone_routing_None;
 "routing"{Eq}"'Vivaldi'" |
 "routing"{Eq}"\"Vivaldi\"" A_surfxml_zone_routing = A_surfxml_zone_routing_Vivaldi;
 "routing"{Eq}"'Cluster'" |
 "routing"{Eq}"\"Cluster\"" A_surfxml_zone_routing = A_surfxml_zone_routing_Cluster;
 "routing"{Eq}"'ClusterTorus'" |
 "routing"{Eq}"\"ClusterTorus\"" A_surfxml_zone_routing = A_surfxml_zone_routing_ClusterTorus;
 "routing"{Eq}"'ClusterFatTree'" |
 "routing"{Eq}"\"ClusterFatTree\"" A_surfxml_zone_routing = A_surfxml_zone_routing_ClusterFatTree;
 "routing"{Eq}"'ClusterDragonfly'" |
 "routing"{Eq}"\"ClusterDragonfly\"" A_surfxml_zone_routing = A_surfxml_zone_routing_ClusterDragonfly;
 "routing"{Eq}"'ClusterOptElecSimple'" |
 "routing"{Eq}"\"ClusterOptElecSimple\"" A_surfxml_zone_routing = A_surfxml_zone_routing_ClusterOptElecSimple;
 "routing"{Eq}"'ClusterOptElecFatTree'" |
 "routing"{Eq}"\"ClusterOptElecFatTree\"" A_surfxml_zone_routing = A_surfxml_zone_routing_ClusterOptElecFatTree;

 ">" {
  if (!AX_surfxml_zone_id) FAIL("Required attribute `id' not set for `zone' element.");
  if (!AX_surfxml_zone_routing) FAIL("Required attribute `routing' not set for `zone' element.");
  LEAVE; STag_surfxml_zone();surfxml_pcdata_ix = 0; ENTER(S_surfxml_zone);
 }
 "/>" {
  if (!AX_surfxml_zone_id) FAIL("Required attribute `id' not set for `zone' element.");
  if (!AX_surfxml_zone_routing) FAIL("Required attribute `routing' not set for `zone' element.");
  LEAVE; STag_surfxml_zone(); surfxml_pcdata_ix = 0; ETag_surfxml_zone(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_5: case S_surfxml_AS_6: SET(S_surfxml_AS_6); break;
   case S_surfxml_include: case S_surfxml_include_1: case S_surfxml_include_2: SET(S_surfxml_include_2); break;
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_5: case S_surfxml_platform_6: SET(S_surfxml_platform_6); break;
   case S_surfxml_zone: case S_surfxml_zone_1: case S_surfxml_zone_3: case S_surfxml_zone_5: case S_surfxml_zone_6: SET(S_surfxml_zone_6); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of zone element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `zone' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `zone' element.");
}

<E_surfxml_zone,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_14,S_surfxml_zone_16,S_surfxml_zone_3,S_surfxml_zone_4,S_surfxml_zone_6,S_surfxml_zone_7,S_surfxml_zone_9>{
 "</zone"{s}">" {
  LEAVE;
  ETag_surfxml_zone();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_5: case S_surfxml_AS_6: SET(S_surfxml_AS_6); break;
   case S_surfxml_include: case S_surfxml_include_1: case S_surfxml_include_2: SET(S_surfxml_include_2); break;
   case S_surfxml_platform: case S_surfxml_platform_1: case S_surfxml_platform_3: case S_surfxml_platform_5: case S_surfxml_platform_6: SET(S_surfxml_platform_6); break;
   case S_surfxml_zone: case S_surfxml_zone_1: case S_surfxml_zone_3: case S_surfxml_zone_5: case S_surfxml_zone_6: SET(S_surfxml_zone_6); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</zone>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</zone>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</zone>' expected.");
}

<E_surfxml_AS,E_surfxml_ASroute,E_surfxml_actor,E_surfxml_bypassASroute,E_surfxml_bypassRoute,E_surfxml_bypassZoneRoute,E_surfxml_cluster,E_surfxml_config,E_surfxml_host,E_surfxml_include,E_surfxml_link,E_surfxml_platform,E_surfxml_process,E_surfxml_route,E_surfxml_storage,E_surfxml_storage___type,E_surfxml_zone,E_surfxml_zoneRoute,S_surfxml_AS_10,S_surfxml_AS_11,S_surfxml_AS_12,S_surfxml_AS_13,S_surfxml_AS_14,S_surfxml_AS_15,S_surfxml_AS_16,S_surfxml_AS_2,S_surfxml_AS_5,S_surfxml_AS_7,S_surfxml_ASroute,S_surfxml_ASroute_1,S_surfxml_ASroute_2,S_surfxml_actor,S_surfxml_actor_1,S_surfxml_actor_2,S_surfxml_bypassASroute,S_surfxml_bypassASroute_1,S_surfxml_bypassASroute_2,S_surfxml_bypassRoute,S_surfxml_bypassRoute_1,S_surfxml_bypassRoute_2,S_surfxml_bypassZoneRoute,S_surfxml_bypassZoneRoute_1,S_surfxml_bypassZoneRoute_2,S_surfxml_cluster,S_surfxml_cluster_1,S_surfxml_cluster_2,S_surfxml_config,S_surfxml_config_1,S_surfxml_config_2,S_surfxml_host,S_surfxml_host_1,S_surfxml_host_2,S_surfxml_include,S_surfxml_include_1,S_surfxml_include_2,S_surfxml_link,S_surfxml_link_1,S_surfxml_link_2,S_surfxml_platform,S_surfxml_platform_1,S_surfxml_platform_2,S_surfxml_platform_3,S_surfxml_platform_4,S_surfxml_platform_5,S_surfxml_platform_6,S_surfxml_platform_7,S_surfxml_platform_8,S_surfxml_process,S_surfxml_process_1,S_surfxml_process_2,S_surfxml_route,S_surfxml_route_1,S_surfxml_route_2,S_surfxml_storage,S_surfxml_storage_1,S_surfxml_storage_2,S_surfxml_storage___type,S_surfxml_storage___type_1,S_surfxml_storage___type_2,S_surfxml_zoneRoute,S_surfxml_zoneRoute_1,S_surfxml_zoneRoute_2,S_surfxml_zone_10,S_surfxml_zone_11,S_surfxml_zone_12,S_surfxml_zone_13,S_surfxml_zone_14,S_surfxml_zone_15,S_surfxml_zone_16,S_surfxml_zone_2,S_surfxml_zone_5,S_surfxml_zone_7>"<zoneRoute"{s} FAIL("Starting tag <zoneRoute> is not allowed here.");

<S_surfxml_AS,S_surfxml_AS_1,S_surfxml_AS_3,S_surfxml_AS_4,S_surfxml_AS_6,S_surfxml_AS_8,S_surfxml_AS_9,S_surfxml_zone,S_surfxml_zone_1,S_surfxml_zone_3,S_surfxml_zone_4,S_surfxml_zone_6,S_surfxml_zone_8,S_surfxml_zone_9>"<zoneRoute"{s} {
  AX_surfxml_zoneRoute_dst = 0;
  surfxml_zoneRoute_dst_isset = 0;
  AX_surfxml_zoneRoute_gw___dst = 0;
  surfxml_zoneRoute_gw___dst_isset = 0;
  AX_surfxml_zoneRoute_gw___src = 0;
  surfxml_zoneRoute_gw___src_isset = 0;
  AX_surfxml_zoneRoute_src = 0;
  surfxml_zoneRoute_src_isset = 0;
  AX_surfxml_zoneRoute_symmetrical = A_surfxml_zoneRoute_symmetrical_YES;
  surfxml_zoneRoute_symmetrical_isset = 0;
  ENTER(AL_surfxml_zoneRoute); pushbuffer(0);
  }

<AL_surfxml_zoneRoute>{
 "dst"{Eq}\' if (surfxml_zoneRoute_dst_isset != 0) {FAIL("Multiple definition of attribute dst in <surfxml_zoneRoute>");} surfxml_zoneRoute_dst_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_zoneRoute_dst);
 "dst"{Eq}\" if (surfxml_zoneRoute_dst_isset != 0) {FAIL("Multiple definition of attribute dst in <surfxml_zoneRoute>");}  surfxml_zoneRoute_dst_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_zoneRoute_dst);

 "gw_dst"{Eq}\' if (surfxml_zoneRoute_gw___dst_isset != 0) {FAIL("Multiple definition of attribute gw_dst in <surfxml_zoneRoute>");} surfxml_zoneRoute_gw___dst_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_zoneRoute_gw___dst);
 "gw_dst"{Eq}\" if (surfxml_zoneRoute_gw___dst_isset != 0) {FAIL("Multiple definition of attribute gw_dst in <surfxml_zoneRoute>");}  surfxml_zoneRoute_gw___dst_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_zoneRoute_gw___dst);

 "gw_src"{Eq}\' if (surfxml_zoneRoute_gw___src_isset != 0) {FAIL("Multiple definition of attribute gw_src in <surfxml_zoneRoute>");} surfxml_zoneRoute_gw___src_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_zoneRoute_gw___src);
 "gw_src"{Eq}\" if (surfxml_zoneRoute_gw___src_isset != 0) {FAIL("Multiple definition of attribute gw_src in <surfxml_zoneRoute>");}  surfxml_zoneRoute_gw___src_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_zoneRoute_gw___src);

 "src"{Eq}\' if (surfxml_zoneRoute_src_isset != 0) {FAIL("Multiple definition of attribute src in <surfxml_zoneRoute>");} surfxml_zoneRoute_src_isset = 1; ENTER(VALUE1); BUFFERSET(AX_surfxml_zoneRoute_src);
 "src"{Eq}\" if (surfxml_zoneRoute_src_isset != 0) {FAIL("Multiple definition of attribute src in <surfxml_zoneRoute>");}  surfxml_zoneRoute_src_isset = 1; ENTER(VALUE2); BUFFERSET(AX_surfxml_zoneRoute_src);

 "symmetrical"{Eq}"'YES'" |
 "symmetrical"{Eq}"\"YES\"" A_surfxml_zoneRoute_symmetrical = A_surfxml_zoneRoute_symmetrical_YES;
 "symmetrical"{Eq}"'NO'" |
 "symmetrical"{Eq}"\"NO\"" A_surfxml_zoneRoute_symmetrical = A_surfxml_zoneRoute_symmetrical_NO;
 "symmetrical"{Eq}"'yes'" |
 "symmetrical"{Eq}"\"yes\"" A_surfxml_zoneRoute_symmetrical = A_surfxml_zoneRoute_symmetrical_yes;
 "symmetrical"{Eq}"'no'" |
 "symmetrical"{Eq}"\"no\"" A_surfxml_zoneRoute_symmetrical = A_surfxml_zoneRoute_symmetrical_no;

 ">" {
  if (!AX_surfxml_zoneRoute_dst) FAIL("Required attribute `dst' not set for `zoneRoute' element.");
  if (!AX_surfxml_zoneRoute_gw___dst) FAIL("Required attribute `gw_dst' not set for `zoneRoute' element.");
  if (!AX_surfxml_zoneRoute_gw___src) FAIL("Required attribute `gw_src' not set for `zoneRoute' element.");
  if (!AX_surfxml_zoneRoute_src) FAIL("Required attribute `src' not set for `zoneRoute' element.");
  LEAVE; STag_surfxml_zoneRoute();surfxml_pcdata_ix = 0; ENTER(S_surfxml_zoneRoute);
 }
 "/>" {
  if (!AX_surfxml_zoneRoute_dst) FAIL("Required attribute `dst' not set for `zoneRoute' element.");
  if (!AX_surfxml_zoneRoute_gw___dst) FAIL("Required attribute `gw_dst' not set for `zoneRoute' element.");
  if (!AX_surfxml_zoneRoute_gw___src) FAIL("Required attribute `gw_src' not set for `zoneRoute' element.");
  if (!AX_surfxml_zoneRoute_src) FAIL("Required attribute `src' not set for `zoneRoute' element.");
  LEAVE; STag_surfxml_zoneRoute(); surfxml_pcdata_ix = 0; ETag_surfxml_zoneRoute(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_4: case S_surfxml_AS_6: case S_surfxml_AS_8: case S_surfxml_AS_9: SET(S_surfxml_AS_9); break;
   case S_surfxml_zone: case S_surfxml_zone_1: case S_surfxml_zone_3: case S_surfxml_zone_4: case S_surfxml_zone_6: case S_surfxml_zone_8: case S_surfxml_zone_9: SET(S_surfxml_zone_9); break;
  }
 }
 .       FAIL("Unexpected character `%c' in attribute list of zoneRoute element.", yytext[0]);
 {Name} FAIL("Bad attribute `%s' in `zoneRoute' element start tag.",yytext);
 <<EOF>> FAIL("EOF in attribute list of `zoneRoute' element.");
}

<E_surfxml_zoneRoute,S_surfxml_zoneRoute,S_surfxml_zoneRoute_2>{
 "</zoneRoute"{s}">" {
  LEAVE;
  ETag_surfxml_zoneRoute();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_surfxml_AS: case S_surfxml_AS_1: case S_surfxml_AS_3: case S_surfxml_AS_4: case S_surfxml_AS_6: case S_surfxml_AS_8: case S_surfxml_AS_9: SET(S_surfxml_AS_9); break;
   case S_surfxml_zone: case S_surfxml_zone_1: case S_surfxml_zone_3: case S_surfxml_zone_4: case S_surfxml_zone_6: case S_surfxml_zone_8: case S_surfxml_zone_9: SET(S_surfxml_zone_9); break;
  }
 }
 "</"{Name}{s}">" FAIL("Unexpected end-tag `%s': `</zoneRoute>' expected.",yytext);
 .       FAIL("Unexpected character `%c': `</zoneRoute>' expected.",yytext[0]);
 <<EOF>> FAIL("Premature EOF: `</zoneRoute>' expected.");
}

 /* EPILOG: after the root element. */

<EPILOG>{
 . {SET(PROLOG); yyless(0); CLEANUP; return -1;}
 <<EOF>> 	SUCCEED;
}

 /* CHARACTER DATA. */

<IN_trace,VALUE1,VALUE2>{
 /* Non-defined standard entities... */
"&amp;"  BUFFERPUTC('&');
"&lt;"   BUFFERPUTC('<');
"&gt;"   BUFFERPUTC('>');
"&apos;" BUFFERPUTC('\'');
"&quot;" BUFFERPUTC('"');

 /* Character entities. */
 "&#"[[:digit:]]+";"	BUFFERPUTC((unsigned char)atoi(yytext+2));
 "&#x"[[:xdigit:]]+";"	BUFFERPUTC((unsigned char)strtol(yytext+3,NULL,16));
}

<IN_trace,VALUE1,VALUE2,CDATA>{
 "\n"		|
 "\r"		|
 "\r\n"		|
 "\n\r"		BUFFERPUTC('\n');
}

<IN_trace>{
 "<![CDATA["	ENTER(CDATA);
 "]""]>"		FAIL("Unexpected `]""]>' in character data.");
}

<VALUE1>{
 \'		BUFFERDONE; LEAVE;
 <<EOF>>	FAIL("EOF in literal (\"'\" expected).");
}

<VALUE2>{
 \"		BUFFERDONE; LEAVE;
 <<EOF>>	FAIL("EOF in literal (`\"' expected).");
}

<IN_trace,VALUE1,VALUE2>{
 [^<&]		BUFFERPUTC(yytext[0]);
 [<&]		FAIL("Spurious `%c' in character data.",yytext[0]);
}

<CDATA>{
 "]""]>"		LEAVE;
 /* "]""]"		BUFFERPUTC(yytext[0]); BUFFERPUTC(yytext[1]); */
 .		BUFFERPUTC(yytext[0]);
 <<EOF>>	FAIL("EOF in CDATA section.");
}

 /* Impossible rules to avoid warnings from flex(1). */
 /* Ideally, this should be replaced by code in flexml.pl that
    generates just the states not covered by other rules. */
<*>{
 .|[\n] FAIL("Syntax error on character `%c'.", yytext[0]);
}

%%

/* Element context stack lookup. */
int surfxml_element_context(int i)
{
  return (0<i && i<yy_start_stack_depth
	  ? yy_start_stack[yy_start_stack_ptr - i]
	  : 0);
}

#ifdef FLEX_DEBUG
void print_yy_stack(char* fmt, ...)
{
  int i = 0; va_list ap; va_start(ap, fmt);
  vfprintf(stderr, fmt, ap);
  if (surfxml_statenames) {
      for (i=1; i<yy_start_stack_ptr; i++) {
          fprintf(stderr, "%s/", surfxml_statenames[yy_start_stack[i] ]);
      }
      fprintf(stderr,"%s\n", surfxml_statenames[YY_START]);
  }
  va_end(ap);
}

void print_surfxml_bufferstack()
{
    int i;
    fputs("Buffer: ", stderr);
    for (i = 0; i < blimit; i++) {
       if ( surfxml_bufferstack[i] == '\377' ) break;
         putc(surfxml_bufferstack[i], stderr);
    }
    putc('\n', stderr);
}

static void debug_enter(int state, const char* statename) {
  yy_push_state(state);
  if (yy_flex_debug) {
       print_yy_stack("--ENTER(%s) : ",statename);
       print_surfxml_bufferstack();
  }
}

static void debug_leave(void) {
    if (yy_flex_debug) {
        print_yy_stack("--LEAVE : ");
	print_surfxml_bufferstack();
    }
  yy_pop_state();
}

static void debug_set(int state, const char* statename) {
  BEGIN(state);
  if (yy_flex_debug) print_yy_stack("--SET(%s) : ",statename);
}
#endif


static void cleanup(void)
{
    if (surfxml_statenames) {
        free(surfxml_statenames);
	surfxml_statenames = NULL;
    }
    free(surfxml_bufferstack);
    surfxml_bufferstack = NULL;

    free(indexstack);
    indexstack = NULL;
}


static int fail(const char* fmt, ...)
{
    int chars_left, used;
    va_list ap; va_start(ap, fmt);
#ifdef FLEXML_yylineno
    used = snprintf(flexml_err_msg,flexml_max_err_msg_size,
		   "Invalid XML (XML input line %d, state %d): ",
		   yylineno, YY_START);
#else
    used = snprintf(flexml_err_msg,flexml_max_err_msg_size,
		   "Invalid XML (state %d): ",
		   YY_START);
#endif
    chars_left = flexml_max_err_msg_size - used - 1;
    vsnprintf(flexml_err_msg + used, chars_left, fmt, ap);
    va_end(ap);

#ifndef FLEXML_quiet_parser
    /* print directly to sdterr */
    fprintf(stderr, "%s\n", flexml_err_msg);
    flexml_err_msg[0] = '\0';
#endif

    cleanup();

    return 1;
}
